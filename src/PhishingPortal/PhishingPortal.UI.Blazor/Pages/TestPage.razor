@page "/gridsample"

@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using PhishingPortal.Dto
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthState authState;


    @if (_task.IsCompleted)
    {
      <div class="row">
         <div class="col-sm-12">
            <div class="card">
                <div class="card-body">
                    <div class="col-md-12" style="padding: 0;">
                        <GridComponent T="CampaignTemplate" Grid="@_grid"></GridComponent>
                    </div>
                </div>
            </div>
         </div>
      </div>
    }
    else
    {
        <p><em>Loading...</em></p>
    }

    @code
{
    private CGrid<CampaignTemplate> _grid;
    private Task _task;

    Action<IGridColumnCollection<CampaignTemplate>> columns = c =>
    {
    //c.Add(o => o.Id).Css("gridtitle").SetWidth("50px");
        c.Add(o => o.Id).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.CreatedOn).Css("table-bordered");
        c.Add(o => o.Name).Css("table-bordered");
        c.Add(o => o.IsActive).Css("table-bordered");
        c.Add(o => o.Type).Css("table-bordered");
    };

    protected override async Task OnParametersSetAsync()
    {
        string url = $"odata/template?t={authState.TenantIdentifier}";
        var query = new QueryDictionary<StringValues>();

        var client = new GridODataClient<CampaignTemplate>(HttpClient, url, query, false, "ordersGrid", columns, 10)
            .Sortable().SetStriped(true)
            .Filterable().SetRowCssClasses(x => (x.Id)%2 == 1 ? "gridEcolor" : "gridOcolor")
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .Searchable(true, false, false);

        _grid = client.Grid;

        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }


}