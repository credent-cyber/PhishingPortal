@page "/gridsample"
@using GridShared.Events
@using Newtonsoft.Json.Linq
@using PhishingPortal.Dto
@using System.Drawing
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives

@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Helpers
@using PhishingPortal.UI.Blazor.Models
@using PhishingPortal.UI.Blazor.Shared.Components.Reports

@inject TenantClient client
@inject ILogger<TenantDashboard> logger
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthState authState;

<div class="form-group row">
    <label for="colFormLabel" class="col-md-2 col-form-label" style="font-weight:700">Select Year</label>
    <div class="col-md-10">
        <select onchange="@ChangeYear" class="form-select" aria-label="Default select example">
            @if (Years != null)
            {
                foreach (var year in Years.OrderByDescending(y => y))
                {
                    if (year == Year)
                    {
                        <option value="@year" selected>@year</option>
                    }
                    else
                    {
                        <option value="@year">@year</option>
                    }
                }
            }
        </select>

    </div>
</div>
<div class="pcoded-content">
    <div class="row">   
        <div class="col-sm-12 col-md-12 col-xl-12">
            <DrillDown_Summary Total="total" Hits="hits" Reported="reported" PronePercent="pronePercent">
            </DrillDown_Summary>
        </div>
    </div>
</div>

<div style="overflow: hidden;width: 100vw;max-width: 95vw;margin-left: calc(50% - 48vw);">
    <GridComponent @ref="_gridComponent" T="CampaignLog" Grid="@_grid"></GridComponent>
</div>

@code {

    [Parameter]
    public int Id { get; set; }
    private List<CampaignLog> CampaignLogs = new List<CampaignLog>();
    private int total;
    private int hits;
    private int reported;
    private decimal pronePercent;

    private GridComponent<CampaignLog> _gridComponent;
    private CGrid<CampaignLog> _grid;
    private Task _task;
    private GridODataClient<CampaignLog> _client;
    private bool _eventHooked = false;
    private List<int> Years;
    public int Year { get; set; } = DateTime.Now.Year;

    Action<IGridColumnCollection<CampaignLog>> columns = c =>
    {
        c.Add(o => o.Id).Titled("LogID").SetWidth("30px").Css("table-bordered");
        c.Add(o => o.Camp.Id).Titled("CampID").SetWidth("30px").Css("table-bordered");
        c.Add(o => o.Camp.Name).Css("table-bordered").Titled("Campaign Name"); ;
        c.Add(o => o.CampignType).Css("table-bordered").SetWidth("60px");
        c.Add(o => o.Camp.Category).Css("table-bordered").SetWidth("60px").Titled("Category");
        c.Add(o => o.IsHit).Css("table-bordered");
        c.Add(o => o.IsReported).Css("table-bordered");
        c.Add(o => o.CreatedOn).Css("table-bordered");

    };

    protected override void OnAfterRender(bool firstRender)
    {
        _gridComponent.AfterRefreshGrid += AfterRefreshGrid;
    }

    private async Task AfterRefreshGrid()
    {  

        var grid = _gridComponent.Grid as CGrid<CampaignLog>;

        if (grid != null)
        {
            Calculate(grid);

            StateHasChanged();
        }

        await Task.CompletedTask;
    }


    protected override async Task OnParametersSetAsync()
    {
        string url = $"Odata/Campaignlog?t={authState.TenantIdentifier}";
        var query = new QueryDictionary<StringValues>();
        try
        {
            var client = new GridODataClient<CampaignLog>(HttpClient, url, query, false, "ordersGrid", columns, 50)
            .ChangePageSize(true)
            .Filterable()
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .Searchable(true, false, false);

            _grid = client.Grid;
            _task = client.UpdateGrid();
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
        }

        await _task.ContinueWith(async (st) =>
        {
            Calculate(_grid);
            await Task.CompletedTask;
        });
        Years = await client.GetCampaignLogYears();
    }

    private void Calculate(CGrid<CampaignLog> grid)
    {
        CampaignLogs = grid?.Items?.ToList() ?? Enumerable.Empty<CampaignLog>().ToList();
        total = CampaignLogs.Count();
        hits = CampaignLogs.Count(o => o.IsHit);
        reported = CampaignLogs.Count(o => o.IsReported);

        if (total > 0)
        {
            pronePercent = Math.Round((decimal)hits / total * 100, 2);
        }
    }

    void ChangeYear(ChangeEventArgs e)
    {
        Year = Convert.ToInt32(e.Value);
        //_gridComponent.AddFilter(Column, filters);
        //_gridComponent.RemoveFilter(Column);
        //_ref = 1;

    }
}

