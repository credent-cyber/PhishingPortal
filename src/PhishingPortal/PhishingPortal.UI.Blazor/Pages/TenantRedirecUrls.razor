@page "/redirect-urls"
@using Newtonsoft.Json
@using PhishingPortal.Common
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models
@attribute [Authorize]

<div class="row">

    <div class="card-body" style="padding: 1px 25px;">
            <div class="card">
                <div class="card-header">
                    <h5>Add New Return Url</h5>
                    <div class="col-auto" style=" width:300px; text-align:center; line-height:0px; float:right; margin-top: -2px;">
                        <UiAlerts Model="alert"></UiAlerts>
                    </div>
                    <div class="dropdown-divider"></div>
                </div>
                <div class="card-body">               
                    <EditForm Model="_nUri" OnValidSubmit="@Add">      
                        <div class="form-row align-items-center">
                            <div class="form-group col-md-3">
                                <InputText name="redirecUrl" class="form-control" @bind-Value="_nUri" placeholder="https://website.com"></InputText>
                            </div>
                            <div class="form-group col-md-3" style="margin-top:0px">
                                <button type="submit" class="btn btn-primary">Add</button>
                            </div>
                        </div>
                    </EditForm>

                    <div class="table-responsive">
                        <table id="redirect-urls" class="table table-striped table-bordered">
                            <thead>
                                <tr role="row">
                                    <th>External Website Link</th>
                                    <th>&nbsp;</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var url in urls)
                                {
                                    <tr role="row" class="odd">
                                        <td>@url</td>
                                        <td>
                                            <button class="btn btn-danger btn-sm" @onclick="()=> Delete(url)"><i class="fa fa-remove"></i></button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>


        </div>


</div>

@inject TenantClient TenantApi;
@inject ILogger<TenantRedirecUrls> Logger;

@code {

    [CascadingParameter]
    protected AlertModel? alert { get; set; }



    private string _nUri = string.Empty;
    private List<string> urls = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            alert?.Clear();
            var settings = await TenantApi.GetSettings();
            var json = settings[Constants.Keys.RETURN_URL_COLLECTION];
            var jsonSettings = JsonConvert.DeserializeObject<Settings>(json) ?? null;

            if (jsonSettings != null)
                urls = jsonSettings.ReturnUrls.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogCritical(ex, ex.Message);
            alert?.SetError("Error while loading, please try again");
        }

    }

    protected async void Delete(string item)
    {
        var index = urls.IndexOf(item);
        if (index >= 0 && index <= urls.Count() - 1)
        {
            urls.RemoveAt(index);
            try
            {
                var result = await TrySave();

                if (!result)
                {
                    urls.Insert(index, item);
                }
                return;

            }
            catch (Exception ex)
            {
                var msg = "Error while deleting entry";
                Logger.LogError(ex, msg);
                alert?.SetError(msg);
            }
        }
    }

    protected async Task Add()
    {
        alert?.Clear();
        bool isUri = Uri.TryCreate(_nUri, UriKind.Absolute, out Uri? uriResult) && (uriResult?.Scheme == Uri.UriSchemeHttp || uriResult?.Scheme == Uri.UriSchemeHttps);

        if (!isUri)
        {
            alert?.SetError("Invalid URL format");
            return;
        }

        if (!urls.Select(o => o.ToLower()).Contains(_nUri.ToLower()))
        {
            if (string.IsNullOrWhiteSpace(_nUri))
            {
                alert?.SetError("URL can't be empty!");
                return;
            }
            urls.Add(_nUri);
            bool saved = await TrySave();
            if (saved)
            {
                _nUri = string.Empty;
                alert?.SetSuccess("Successfully Saved!");
            }
            else
            {
                alert?.SetError("Error while saving");
            }

        }
        else
        {
            alert?.SetError("Website link already exists!!");
        }

    }



    private async Task<bool> TrySave()
    {
        alert?.Clear();
        var settings = new Settings { ReturnUrls = urls.ToArray() };

        var json = JsonConvert.SerializeObject(settings);

        try
        {
            var resultDic = await TenantApi.UpsertSettings(new Dictionary<string, string>() {
                                    { Constants.Keys.RETURN_URL_COLLECTION, json }
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
            alert?.SetError("Error while updating, please try again");
            return false;
        }

        return true;
    }

}
