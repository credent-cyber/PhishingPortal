@page "/redirect-urls"
@using Newtonsoft.Json
@using PhishingPortal.Common
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models
@using System.Threading;
@attribute [Authorize]

<div class="row m-1">

    <EditForm Model="_nUri" OnValidSubmit="@Add">
        <div class="form-row align-items-center">
            <div class="form-group col-md-3">
                <InputText name="redirecUrl" class="form-control" @bind-Value="_nUri" placeholder="https://website.com"></InputText>
            </div>
            <div class="form-group col-md-3" style="margin-top:0px">
                <button type="submit" class="btn btn-primary">Add</button>
            </div>
        </div>
    </EditForm>

    <div class="table-responsive" style="overflow:auto; max-height:60vh">
        <table id="redirect-urls" class="table table-striped table-bordered">
            <thead>
                <tr role="row">
                    <th>External Website Link</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var url in urls)
                {
                    <tr role="row" class="odd">
                        <td>@url</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="()=> Delete(url)"><i class="fa fa-remove"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <Dailog Title="@message" Show="@show" OnCloseDialog="ResetForm">
        @if (show)
        {
            @if (TaskCompleted)
            {
                <div style="text-align:center;">
                    @MessageBody
                </div>
            }
            else
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
        }

    </Dailog>

</div>

@inject TenantClient TenantApi;
@inject ILogger<TenantRedirecUrls> Logger;

@code {

    [CascadingParameter]
    protected AlertModel? alert { get; set; }



    private string _nUri = string.Empty;
    private List<string> urls = new List<string>();
    private Timer _timer;
    private int _delay = 1500;

    bool IsError = false;
    bool IsSuccess = false;
    bool TaskCompleted = false;

    private bool show = false;
    string MessageBody = "Thank you!";
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var settings = await TenantApi.GetSettings();
            if (settings.ContainsKey("return_urls"))
            {
                var json = settings[Constants.Keys.RETURN_URL_COLLECTION];
                var jsonSettings = JsonConvert.DeserializeObject<Settings>(json) ?? null;

                if (jsonSettings != null)
                    urls = jsonSettings.ReturnUrls.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogCritical(ex, ex.Message);
        }
    }

    protected async void Delete(string item)
    {
        message = string.Empty;
        MessageBody = "Thank you!";
        IsError = false;
        IsSuccess = false;
        TaskCompleted = false;
        show = true;      
        var index = urls.IndexOf(item);
        if (index >= 0 && index <= urls.Count() - 1)
        {
            urls.RemoveAt(index);
            try
            {
                var result = await TrySave();             
                if (!result)
                {
                    urls.Insert(index, item);
                }
                message = "Successfully Deleted!";
                TaskCompleted = true;
                StateHasChanged();
                return;

            }
            catch (Exception ex)
            {
                
                var msg = "Error while deleting entry";
                Logger.LogError(ex, msg);
                IsError = true;
                message = "Error!";
                MessageBody = msg;
                TaskCompleted = true;
            }
            
        }
    }


    protected async Task Add()
    {
        message = string.Empty;
        MessageBody = "Thank you!";
        IsError = false;
        IsSuccess = false;
        show = true;
        TaskCompleted = false;
        message = "Please wait";
        bool isUri = Uri.TryCreate(_nUri, UriKind.Absolute, out Uri? uriResult) && (uriResult?.Scheme == Uri.UriSchemeHttp || uriResult?.Scheme == Uri.UriSchemeHttps);

        if (!isUri)
        {
            IsError = true;
            message = "Error!";
            MessageBody = "Invalid URL format";
            TaskCompleted = true;
            return;
        }

        if (!urls.Select(o => o.ToLower()).Contains(_nUri.ToLower()))
        {
            if (string.IsNullOrWhiteSpace(_nUri))
            {              
                IsError = true;
                message = "Error!";
                MessageBody = "URL can't be empty!";
                TaskCompleted = true;
                return;
            }
            urls.Add(_nUri);
            bool saved = await TrySave();
            if (saved)
            {
                _nUri = string.Empty;
                message = "Saved!";
                TaskCompleted = true;
            }
            else
            {
                IsError = true;
                message = "Error!";
                MessageBody = "Error while saving";
                TaskCompleted = true;
            }

        }
        else
        {
            IsError = true;
            message = "Error!";
            MessageBody = "Website link already exists!!";
            TaskCompleted = true;
        }
    }



    private async Task<bool> TrySave()
    {
        message = string.Empty;
        MessageBody = "Thank you!";
        IsError = false;
        IsSuccess = false;
        show = true;
        TaskCompleted = false;
        message = "Please wait";
        var settings = new Settings { ReturnUrls = urls.ToArray() };

        var json = JsonConvert.SerializeObject(settings);

        try
        {
            var resultDic = await TenantApi.UpsertSettings(new Dictionary<string, string>() {
                                    { Constants.Keys.RETURN_URL_COLLECTION, json }
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
           
            IsError = true;
            message = "Error!";
            MessageBody = "Error while updating, please try again";
            TaskCompleted = true;
            return false;
        }

        return true;
    }
    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();

    }


    private void ResetForm()
    {
        show = false;
    }

}
