@page "/redirect-urls"
@using Newtonsoft.Json
@using PhishingPortal.Common
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models

<div class="row">
    <UiAlerts Model="alert"></UiAlerts>
</div>
<div class="row">
    <div class="card">
        <div class="card-header">
            <h5>Add New Website</h5>
        </div>
        <div class="card-body">
            <EditForm Model="_nUri" OnValidSubmit="Add">
                <div class="form-group">
                    <InputText id="redirectUrl" name="redirecUrl" class="form-control" @bind-Value="_nUri"></InputText>
                </div>
                <button class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
        </div>
        <div class="card-body">
            <div class="col-md-12" style="padding: 0;">
                <div class="bt-wizard" id="tabswizard">
                    <div class="tab-content card">
                        <div class="pt-1 bg-primary"></div>
                        <div class="tab-pane card-body pt-4 active show" id="tabs-t-tab1">
                            <div class="table-responsive">
                                <table id="redirect-urls" class="table table-striped table-bordered nowrap">
                                    <thead>
                                        <tr role="row">
                                            <th>External Website Link</th>
                                            <th>&nbsp;</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var url in urls)
                                        {
                                            <tr role="row" class="odd">
                                                <td>@url</td>
                                                <td>
                                                    <button class="btn btn-primary btn-sm" @onclick="()=> Delete(url)"><i class="fa fa-remove"></i></button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>


@inject TenantClient TenantApi;
@inject ILogger<TenantRedirecUrls> Logger;

@code {

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    private string _nUri = string.Empty;
    private List<string> urls = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var settings = await TenantApi.GetSettings();
            var json = settings[Constants.Keys.RETURN_URL_COLLECTION];
            var jsonSettings = JsonConvert.DeserializeObject<Settings>(json) ?? null;

            if (jsonSettings != null)
                urls = jsonSettings.ReturnUrls.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogCritical(ex, ex.Message);
            alert?.SetError("Error while loading, please try again");
        }

    }

    protected async void Delete(string item)
    {
        var index = urls.IndexOf(item);

        if (index >= 0 && index <= urls.Count() - 1)
        {
            urls.RemoveAt(index);
            try
            {
                var result = await TrySave();
                if (!result)
                {
                    urls.Insert(index, item);
                }
            }
            catch (Exception ex)
            {
                var msg = "Error while deleting entry";
                Logger.LogError(ex, msg);
                alert?.SetError(msg);
            }
        }
    }

    protected async void Add()
    {
        bool isUri = Uri.IsWellFormedUriString(_nUri, UriKind.RelativeOrAbsolute);
        alert?.Clear();
        if (isUri)
        {

            if (!urls.Select(o => o.ToLower()).Contains(_nUri.ToLower()))
            {
                urls.Add(_nUri);

                await TrySave();
            }
            else
            {
                alert?.SetError("Website link already exist!!");
            }

        }

    }

    private async Task<bool> TrySave()
    {
        var settings = new Settings { ReturnUrls = urls.ToArray() };

        var json = JsonConvert.SerializeObject(settings);

        try
        {
            var resultDic = await TenantApi.UpsertSettings(new Dictionary<string, string>() {
                                    { Constants.Keys.RETURN_URL_COLLECTION, json }
                    });

            alert?.SetSuccess("Update successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
            alert?.SetError("Error while updating, please try again");
            return false;
        }

        return true;
    }

}
