@page "/request_demo"

@using PhishingPortal.UI.Blazor.Models
@using PhishingPortal.UI.Blazor.Pages.Auth
@using PhishingPortal.UI.Blazor.Shared
@using PhishingPortal.Dto;
@using PhishingPortal.Common;
@using PhishingPortal.UI.Blazor.Client;
@using System.Text.RegularExpressions
@inject RequestClient client
@inject NavigationManager navigationManager
@inject TenantAdminClient AdminClient
@inject ILogger<DemoRequestor> logger
@layout NoLayout

<div class="auth-wrapper align-items-stretch aut-bg-img">
    <div class="flex-grow-1">
        <div class="h-100 d-md-flex align-items-center auth-side-img">
            <div class="col-sm-10 auth-content w-auto">
                <img src="/img/psNewLogo.png" alt="" class="img-fluid" style="width: 300px;">
                <h1 class="text-white my-4">Welcome to PhishSims!</h1>
                <h4 class="text-white font-weight-normal">A powerful phishing simulation platform designed to empower organizations in their cybersecurity efforts.<br />Request a Demo with your details to use all PhishSims features.</h4>
            </div>
        </div>
        <div class="auth-side-form">
            <div class=" auth-content" style="width: 515px;">
                
                <div class="text-center">
                    
                    <img src="/img/psNewLogo.png" alt="" class="img-fluid mb-4 d-block d-xl-none d-lg-none mx-auto" style="width: 120px;">
                </div>
                <h3 class="mb-4 f-w-400" style="text-align: center;">Request Demo</h3>
                @*<div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="feather icon-mail"></i></span>
                    </div>
                    <input type="email" class="form-control" placeholder="Email address">
                </div>
                <div class="input-group mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="feather icon-lock"></i></span>
                    </div>
                    <input type="password" class="form-control" placeholder="Password">
                </div>
                <div class="form-group text-left mt-2">
                    <div class="checkbox checkbox-primary d-inline">
                        <input type="checkbox" name="checkbox-p-1" id="checkbox-p-1" checked="">
                        <label for="checkbox-p-1" class="cr">Save credentials</label>
                    </div>
                </div>
                <button class="btn btn-block btn-primary mb-0">Signin</button>*@
                <EditForm Model="@Model" OnInvalidSubmit="@OnValidSubmit">
                    <DataAnnotationsValidator />
                    <UiAlerts Model="alert"></UiAlerts>
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label bold-font required-field text-left">Your Name</label>
                        <div class="col-sm-8">
                            <InputText @bind-Value="@Model.FullName" class="form-control" id="FullName" placeholder="Name"></InputText>
                            <ValidationMessage style="text-align: left;" For="() => Model.FullName" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label bold-font required-field text-left">Company Name</label>
                        <div class="col-sm-8">
                            <InputText class="form-control" id="Company" placeholder="Company" @bind-Value="@Model.Company"></InputText>
                            <ValidationMessage style="text-align: left;" For="() => Model.Company" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label bold-font required-field text-left">Email</label>
                        <div class="col-sm-8">
                            <InputText type="email" class="form-control" id="Email" placeholder="example@email.com" @bind-Value="@Model.Email"></InputText>
                            <ValidationMessage style="text-align: left;" For="() => Model.Email" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label bold-font text-left">Mobile No.</label>
                        <div class="col-sm-8">
                            <InputText class="form-control" id="ContactNumber" placeholder="98XXXXXXXX" @bind-Value="@Model.ContactNumber"> </InputText>
                            <ValidationMessage style="text-align: left;" For="() => Model.ContactNumber" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label bold-font text-left">Message</label>
                        <div class="col-sm-8">
                            <InputTextArea class="form-control" placeholder="Write a message..." @bind-Value="@Model.Messages" style="height:100px;"></InputTextArea>
                            <ValidationMessage style="text-align: left;" For="() => Model.Messages" />
                        </div>
                    </div>
                    <div class="text-center">
                    <div class="col-12">
                        @if (submit is true)
                        {
                            <button @onclick="OnValidSubmit" class="btn btn-primary" disabled>Submit</button>
                            <button @onclick="Close" class="btn btn-secondary">Close</button>
                        }
                        else
                        {
                            <button @onclick="OnValidSubmit" class="btn btn-primary">Submit</button>
                            <button @onclick="Close" class="btn btn-secondary">Close</button>

                        }
                        <div class="text-center" style="margin-top: 20px;">


                            <p class="mb-0 text-muted">Already have an account? <a href="/login" class="f-w-400">Log In</a></p>
                        </div>
                    </div>
                    </div>

                </EditForm>

                
            </div>
        </div>
    </div>
</div>

   
@code {

    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    private Timer _timer;
    private int _delay = 3000;


    private bool isError = false;
    private bool isSucess = false;
    private string message = string.Empty;
    private bool show = false;
    private bool submit = false;

    DemoRequestor Model = new DemoRequestor();


    protected override async Task OnInitializedAsync()
    {
        alert ??= new AlertModel();
    }
    protected async Task OnValidSubmit()
    {
        alert?.Clear();
        message = string.Empty;
        if (@Model.FullName is null || @Model.Company is null || @Model.Email is null)
        {
            isError = true;
            isSucess = false;
            message = "Name, Company and Email can't be empty!";
            alert?.SetError(message);
            return;
        }
        if (@Model.Email is not null)
        {
            var formate = Regex.IsMatch(@Model.Email, @".+@.+\..+");
            var email = Model.Email.Split("@")[1];
            var restrictMail = AppConfig.restrictEmail;
            foreach (var mail in restrictMail)
            {
                if (email.Contains(mail))
                {
                    isSucess = false;
                    isError = true;
                    message = "Please provide your Company Email!";
                    alert?.SetError(message);
                    return;
                }
            }

            if (!formate)
            {
                isSucess = false;
                isError = true;
                message = "Invalid Email!";
                alert?.SetError(message);
                return;
            }
        }

        try
        {
            var result = await client.CreateDemoRequest(Model);
            isSucess = true;
            isError = false;
            message = "Saved!";
            show = true;
            submit = true;
            alert?.SetSuccess(message);
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            isError = true;
            message = "Error while Submitting!";
            alert?.SetError(message);
        }
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }


    private void Close()
    {
        show = false;
        navigationManager.NavigateTo("/");
    }
    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();

    }

}