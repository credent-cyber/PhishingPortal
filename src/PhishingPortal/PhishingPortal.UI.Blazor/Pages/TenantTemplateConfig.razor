@page "/tenant-templates-config"
@page "/tenant-templates-config/{Id:int}"

@using System.IO
@using HtmlAgilityPack;
@using Newtonsoft.Json
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using System.Text.RegularExpressions
@using Blazored.TextEditor
@using PhishingPortal.UI.Blazor.Pages
@using System.Text.Json;
@inject NavigationManager NavigationManager

@inject TenantClient client
@inject ILogger<TenantCampaigns> logger
@inject IJSRuntime JSRuntime
@using BlazingComponents.Summernote
@inject HttpClient Http
@using PhishingPortal.Common
@using Microsoft.Extensions.Configuration
@using System.Web;
@inject IConfiguration _config
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (model == null)
{

    <div class="col-sm-12" style="margin-top:45vh">

        <div class="card-header">
            <div class="loading-bar"></div>
        </div>

    </div>
}
else
{
    <div class="pcoded-content" style="padding:0px 0px">
        <div class="col-md-12 p-0">
            <div class="card">
                <div class="card-header bg-info" style="padding:15px !important;">
                    <h5 class="text-white">@Title</h5>
                    <div style="float:right">
                        <a @onclick="onClose" style="cursor:pointer;"><i class="fa fa-times-circle" aria-hidden="true"></i></a>
                    </div>
                </div>
                <div class="card-body" style="padding-top: 10px;">
                    <div class="row">
                        <EditForm Model="@model" OnValidSubmit="@OnSave">
                            <DataAnnotationsValidator />
                            @* <ValidationSummary /> *@
                            <div class="row">

                                @if (model.Type == CampaignType.Sms)
                                {
                                    <div class="form-group row mb-2" style="width:98.2%;margin-left: 14px;padding: 4px;">
                                        <label class="col-form-label col-md-2 bold-font required-field" style="padding-right: 0;">Name</label>
                                        <div class="col-md-4">
                                            <InputText id="Name" @bind-Value="model.Name" class="form-control" />
                                            <ValidationMessage For="() => model.Name" />
                                        </div>

                                        <label class="col-form-label col-md-1 bold-font required-field">Type</label>
                                        <div class="col-md-3">
                                            <InputSelect @bind-Value="model.Type" class="form-control" id="Type">
                                                @foreach (var val in Enum.GetValues(typeof(CampaignType)))
                                                {
                                                    <option value="@val">@val</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="() => model.Type" />
                                        </div>

                                        <div class="col-md-2">
                                            <label class="col-form-label bold-font">Is Active</label>
                                            <input type="checkbox" @bind="@model.IsActive" class="ml-4" />
                                        </div>
                                    </div>

                                    <div class="form-group row mb-2" style="width:98.2%;margin-left: 14px;padding: 4px;">
                                        <label class="col-form-label col-md-2 bold-font required-field" style="padding-right: 0;">TemplateID</label>
                                        <div class="col-md-4">
                                            <InputText id="templid" @bind-Value="model.TemplateId" class="form-control" />
                                            <ValidationMessage For="@(() => model.TemplateId)" />
                                        </div>
                                    </div>
                                }
                                else
                                {

                                    <div class="form-group row mb-2" style="width:98.2%;margin-left: 14px;padding: 4px;">
                                        <label class="col-form-label col-md-1 bold-font required-field" style="padding-right: 0;">Name</label>
                                        <div class="col-md-3">
                                            <InputText id="Name" @bind-Value="model.Name" class="form-control" />
                                            <ValidationMessage For="() => model.Name" />
                                        </div>
                                        <label class="col-form-label col-md-1 bold-font required-field">Type</label>
                                        <div class="col-md-2">

                                            <InputSelect @bind-Value="model.Type" class="form-control" id="Type">
                                                @foreach (var val in Enum.GetValues(typeof(CampaignType)))
                                                {
                                                    <option value="@val">@val</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="() => model.Type" />
                                        </div>

                                        <div class="col-md-2">
                                            <label class="col-form-label bold-font">Is HTML</label>
                                            <input type="checkbox" @bind="@model.IsHtml" class="ml-4" />
                                        </div>

                                        <div class="col-md-2">
                                            <label class="col-form-label bold-font">Is Active</label>
                                            <input type="checkbox" @bind="@model.IsActive" class="ml-4" />
                                        </div>
                                    </div>
                                }


                                @*    <div class="form-group row">
                            @if (model.Type == CampaignType.Sms)
                            {
                            <div class="form-group row">
                            <label class="col-form-label col-md-4 bold-font required-field" style="padding-right: 0;">Template ID</label>
                            <div class="col-md-8">
                            <InputText id="templid" @bind-Value="model.TemplateId" class="form-control" />
                            <ValidationMessage For="@(() => model.TemplateId)" />
                            </div>
                            </div>
                            }
                            <label class="col-form-label col-md-2 bold-font">Is Active</label>
                            <div class="col-md-4">
                            @if (model.IsActive is false || model.Id == 0)
                            {
                            <div class="radio radio-info radio-fill d-inline">
                            <input type="radio" name="radio-i-in-1" id="radio-1" @onclick="@(()=>model.IsActive = true)">
                            <label for="radio-1" class="cr">Yes</label>
                            </div>
                            <div class="radio radio-info radio-fill d-inline">
                            <input type="radio" name="radio-i-in-1" id="radio-2" @onclick="@(()=>model.IsActive = false)" checked>
                            <label for="radio-2" class="cr">No</label>
                            </div>
                            }
                            else
                            {
                            <div class="radio radio-info radio-fill d-inline">
                            <input type="radio" name="radio-i-in-1" id="radio-1" @onclick="@(()=>model.IsActive = true)" checked>
                            <label for="radio-1" class="cr">Yes</label>
                            </div>
                            <div class="radio radio-info radio-fill d-inline">
                            <input type="radio" name="radio-i-in-1" id="radio-2" @onclick="@(()=>model.IsActive = false)">
                            <label for="radio-2" class="cr">No</label>
                            </div>
                            }
                            </div>

                            @if (model.Type == CampaignType.Email || model.Type == CampaignType.Whatsapp)
                            {

                            <label class="col-form-label col-md-2 bold-font">Is Html</label>
                            <div class="col-md-4">
                            @if (model.IsHtml is false || model.Id == 0)
                            {
                            <div class="radio radio-info radio-fill d-inline">
                            <input type="radio" name="radio-i-in-2" id="radio-i-infill-1" @onclick="@(()=>model.IsHtml = true)">
                            <label for="radio-i-infill-1" class="cr">Yes</label>
                            </div>
                            <div class="radio radio-info radio-fill d-inline">
                            <input type="radio" name="radio-i-in-2" id="radio-i-infill-2" @onclick="@(()=>model.IsHtml = false)" checked>
                            <label for="radio-i-infill-2" class="cr">No</label>
                            </div>
                            }
                            else
                            {
                            <div class="radio radio-info radio-fill d-inline">
                            <input type="radio" name="radio-i-in-2" id="radio-i-infill-1" @onclick="@(()=>model.IsHtml = true)" checked>
                            <label for="radio-i-infill-1" class="cr">Yes</label>
                            </div>
                            <div class="radio radio-info radio-fill d-inline">
                            <input type="radio" name="radio-i-in-2" id="radio-i-infill-2" @onclick="@(()=>model.IsHtml = false)">
                            <label for="radio-i-infill-2" class="cr">No</label>
                            </div>
                            }
                            </div>
                            }

                            </div> *@


                                @if (model.Type == CampaignType.Email || model.Type == CampaignType.Whatsapp)
                                {
                                    <div style="max-width:100%; overflow-x:auto;" class="col-md-12">
                                        <UnlayerEditor Design="@model.Design" />
                                    </div>
                                }
                                @if (model.Type == CampaignType.Sms)
                                {
                                    <textarea class="col-sm-12" style="background-color:lavender; height:200px;margin-left: 17px; max-width: 96% !important;" @bind="text" @bind:event="oninput" maxlength="@MAX_TEXT_COUNT" />
                                    <label>Chars left: @(MAX_TEXT_COUNT - text.Count())</label>
                                }

                                <div style="text-align:center; margin-top:5px; margin-left: 14px; width: 98.2%; padding: 6px;">
                                    <button type="submit" class="btn btn-primary">Save</button>
                                    <button type="button" class="btn btn-danger" @onclick="onClose">Close</button>
                                </div>

                                <br />
                            </div>

                        </EditForm>
                    </div>

                </div>
            </div>

        </div>
    </div>
}

<Dailog Title="@message" Show="@show" OnCloseDialog="ResetForm">
    @if (show)
    {
        @if (TaskCompleted)
        {
            <div style="text-align:center;">
                @MessageBody
            </div>
        }
        else
        {
            <div style="text-align:center">
                <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
            </div>
        }
    }

</Dailog>


@code {

    [Parameter]
    public int Id { get; set; }
    private string contents;
    bool TaskCompleted = false;
    string MessageBody = "Thank you!";

    public string Title
    {
        get
        {
            return model?.Id > 0 ? "Modify Template" : "Create New Template";
        }
    }

    bool IsError = false;
    bool IsSuccess = false;
    bool loading = false;
    bool temp = false;
    bool import = false;
    bool showEditButton = true;

    string text = "";
    const int MAX_TEXT_COUNT = 160;

    bool showPreview = false;
    bool showNewDialog = false;
    string content = string.Empty;
    MarkupString previewContent => (MarkupString)content;

    List<CampaignTemplate> Templates;
    CampaignType? type = null;
    CampaignTemplate model;
    private bool show = false;

    protected override async Task OnInitializedAsync()
    {
        Templates = await client.GetTemplatesByType(type);
        if (Id != 0)
        {
            message = string.Empty;
            model = await client.GetTemplateById(Id);
            if (model.Type == CampaignType.Email || model.Type == CampaignType.Whatsapp) { contents = model.Content; }
            if (model.Type == CampaignType.Sms) { text = model.Content; }
        }
        else
        {
            message = string.Empty;
            model = new CampaignTemplate();
            model.Version = "1";
            model.Type = CampaignType.Email;

        }

    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (model != null)
            UpdateSummerNoteContent(contents);

        return base.OnAfterRenderAsync(firstRender);
    }

    protected void OnPreviewClick(CampaignTemplate template)
    {
        showPreview = true;
        content = template.Content;
    }

    protected void OnClosePreview()
    {
        content = string.Empty;
        showPreview = false;
    }

    public void OnNewClick()
    {
        message = string.Empty;
        model = new CampaignTemplate();
        model.Version = "1";
        showNewDialog = true;
    }

    public void OnEditClick(CampaignTemplate template)
    {
        message = string.Empty;
        model = template;
        showNewDialog = true;
    }


    private AuthenticationState authState;

    protected async Task OnSave()
    {
        message = string.Empty;
        MessageBody = "Thank you!";
        IsError = false;
        IsSuccess = false;
        TaskCompleted = false;
        show = true;
        message = "Please wait";
        if (model.Type == CampaignType.Email || model.Type == CampaignType.Whatsapp)
        {
            //model.Content = contents = await GetSummerNoteContent();

            //fetching data from Unlayer editor
            model.Content = await JSRuntime.InvokeAsync<string>("exportHtml");
            model.Design = await JSRuntime.InvokeAsync<string>("exportDesign");
        }

        if (model.Type == CampaignType.Sms) { model.Content = text; }

        if (model.Content == string.Empty)
        {
            IsError = true;
            message = "Template Content can't be null.";
            TaskCompleted = true;
            return;
        }

        try
        {
            message = "Please wait";
            int Id = model.Id;

            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (Id > 0)
                model.ModifiedBy = authState.User.Identity.Name;
            else
                model.CreatedBy = authState.User.Identity.Name;

            model = await client.UpsertCampaignTemplate(model);
            IsSuccess = true;

            if (!Templates.Any(o => o.Id == model.Id))
                Templates.Add(model);

            message = Id > 0 ? "Successfully Updated" : "Successfully Added";
            TaskCompleted = true;
        }
        catch (Exception ex)
        {
            IsError = true;
            message = "Error!";
            MessageBody = ex.Message;
            TaskCompleted = true;
            logger.LogCritical(ex, ex.Message);
        }
    }

    protected void onClose()
    {
        NavigationManager.NavigateTo("tenant-templates");
    }

    public async Task SummerNoteEditorRefresh()
    {
        string content = await GetSummerNoteContent();
        UpdateSummerNoteContent(content);
    }

    string result = "";
    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var singleFile = e.File;
        var fileStream = e.File.OpenReadStream();
        var ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        fileStream.Close();
        result = System.Text.Encoding.UTF8.GetString(ms.ToArray());

        if (model.Type == CampaignType.Sms)
            text = result;
        else
            contents = result;

    }

    protected void UpdateSummerNoteContent(string content)
    {
        var selector = "div[id^=BlazingSummerNote]";
        JSRuntime.InvokeVoidAsync("summernoteEditorHack", content, selector);
    }

    protected async Task<string> GetSummerNoteContent()
    {
        var selector = "div[id^=BlazingSummerNote]";
        var result = await JSRuntime.InvokeAsync<string>("getSummernoteEditorContent", selector);
        return result;
    }


    //Image Upload
    List<ImageFile> filesBase64 = new List<ImageFile>();
    string message = "";
    bool isDisabled = false;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            filesBase64.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name }); // convert to a base64 string!!
        }
        message = "Click UPLOAD to continue";
    }

    async Task Upload()
    {
        isDisabled = true;
        using (var msg = await Http.PostAsJsonAsync<List<ImageFile>>("/api/upload", filesBase64, System.Threading.CancellationToken.None))
        {
            isDisabled = false;
            if (msg.IsSuccessStatusCode)
            {
                message = $"{filesBase64.Count} files uploaded";
                filesBase64.Clear();
            }
        }
    }

    private void ResetForm()
    {
        show = false;
        if (message.Contains("Successfully Added"))
        {
            model = new CampaignTemplate();
            contents = string.Empty;
            model.Content = null;
            model.Type = CampaignType.Email;
        }
    }

    static string GetPlainText(string html)
    {
        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(html);

        // Use the Descendants method to get all elements in the HTML
        IEnumerable<HtmlNode> nodes = doc.DocumentNode.Descendants();

        // Concatenate the InnerText of each element to get plain text
        string plainText = string.Join(" ", nodes.Select(node => node.InnerText.Trim()));

        return plainText;
    }

    [JSInvokable]
    public static async Task EditorReady(string design)
    {
        var tenantTemplateConfig = new TenantTemplateConfig(); // Create an instance
        await tenantTemplateConfig.LoadDesign(design);
    }

    public async Task LoadDesign(string design)
    {

        if (design != null)
        {
            await JSRuntime.InvokeVoidAsync("loadDesign", design);
            var jsonObject = JsonConvert.DeserializeObject(design);
        }
    }
}

