@page "/forgetpassword"
@using PhishingPortal.Dto.Auth
@using System.ComponentModel.DataAnnotations
@using PhishingPortal.UI.Blazor.Models
@layout AuthLayout

@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<div class="card-body" style="padding: 32px 6px;">
    <EditForm Model="Model" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />

        <img src="assets/images/logo.png" alt="" class="img-fluid mb-1" style=" max-width: 50% !important;">
        <h4 style="font-family:cursive" class="mb-3 f-w-400">Reset your password</h4>
        <UiAlerts Model="alerts"></UiAlerts>
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text"><i class="feather icon-mail"></i></span>
            </div>
            <InputText id="Email" class="form-control" placeholder="Email Address" @bind-Value="Model.Email"></InputText>
        </div>
        <ValidationMessage style="text-align: left" For="() => Model.Email"></ValidationMessage>

        <button type="submit" class="btn btn-block btn-primary mb-4 mt-3">Reset password</button>
        <p class="mb-0 text-muted">Click here to <a href="login" class="f-w-400">login</a></p>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    private AlertModel alerts { get; set; } = new();
    private Timer _timer;
    private int _delay = 4000;

    private ForgetPasswordRequest Model { get; set; } = new ForgetPasswordRequest();

    protected override void OnInitialized()
    {
        alerts ??= new AlertModel();
        alerts.Clear();
    }

    private async Task OnSubmit()
    {
        alerts.Clear();
        alerts.SetSuccess("Please wait..");
        var result = await authStateProvider.ForgetPassword(Model);

        if (result.Item1)
        {
            alerts.SetSuccess(result.Item2);
            Model = new();
            StateHasChanged();
        }
        else { alerts.SetError(result.Item2); }
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }
    private void TimerCallback(Object o)
    {
        alerts?.Clear();
        _timer.Dispose();
        StateHasChanged();

    }
}
