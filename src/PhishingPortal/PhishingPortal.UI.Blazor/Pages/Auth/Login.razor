@page "/login"

@using PhishingPortal.Dto.Auth
@using PhishingPortal.UI.Blazor.Models
@using Microsoft.AspNetCore.WebUtilities

@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject AuthenticationStateProvider authState


<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
    <div class="card-body" style="padding: 32px 6px;">
        <img src="assets/images/logo.png" alt="" class="img-fluid mb-1" style="max-width: 50% !important;">
        <h3 class="mb-3" style="font-size:24px;font-family: cursive;">Welcome to <span class="text-c-blue"> PhishSims</span></h3>

        <DataAnnotationsValidator />
        <UiAlerts Model="Alerts"></UiAlerts>
        <div class="toggle-block">
            <div class="input-group mb-2 has-validation">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="feather icon-mail"></i></span>
                </div>
                <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Email address" autocomplete="username" />
                <ValidationMessage For="@(() => loginRequest.UserName)" />
            </div>
            <div class="input-group has-validation">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="feather icon-lock"></i></span>
                </div>
                <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" autocomplete="current-password" />
            </div>
            <ValidationMessage style="text-align: left" For="@(() => loginRequest.Password)" />

            <div class="form-group text-left mt-3">
                <div class="checkbox checkbox-primary d-inline">
                    <InputCheckbox id="checkbox-fill-a1" @bind-Value="@loginRequest.RememberMe" />
                    <label for="checkbox-fill-a1" class="cr"> Save credentials</label>
                </div>
            </div>
            <button class="btn  btn-primary mb-2 col" type="submit">Signin</button>

            <!-- Office 365 Login Button -->
            <a class="btn  btn-warning mb-2 col fa fa-windows" href="/oidc/challenge?returnUrl=@(string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl)&provider=Microsoft"> Office 365 User</a>

            <!-- Google Login Button -->
            <a class="btn  btn-danger mb-4 col fa fa-google" href="/GoogleOAuth/challenge"> Login with Google</a>



            <p class="mb-2 text-muted">
                Forgot password?
                <span @onclick="ResetPasswordClick" class="f-w-400 font-weight-bold" style="cursor: pointer">Reset</span>
            </p>


        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public string Oidc { get; set; } = string.Empty;

    public string ReturnUrl { get; protected set; } = string.Empty;

    [CascadingParameter]
    public AlertModel Alerts { get; set; } = new();

    LoginRequest loginRequest { get; set; } = new LoginRequest();

    protected override async Task OnInitializedAsync()
    {
        Alerts.Clear();

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("ReturnUrl", out var url))
        {
            ReturnUrl = url;
        }

        try
        {
            var state = await authState.GetAuthenticationStateAsync();

            if (state?.User?.Identity?.IsAuthenticated ?? false)
            {
                navigationManager.NavigateTo("/");
            }
        }
        catch { }

    }

    private void ResetPasswordClick()
    {
        navigationManager.NavigateTo("forgetpassword");
    }

    private async Task OnSubmit()
    {
        try
        {
            Alerts.Clear();

            await authStateProvider.Login(loginRequest);

            if (string.IsNullOrEmpty(ReturnUrl))
                navigationManager.NavigateTo("/", true);
            else
                navigationManager.NavigateTo(ReturnUrl);
        }
        catch (Exception)
        {
            Alerts.SetError("Couldn't login, please check your credentials are correct");
        }
    }
}