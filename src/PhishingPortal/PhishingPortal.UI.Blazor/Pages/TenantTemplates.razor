@page "/tenant-templates"

@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using System.Text.RegularExpressions
@using Blazored.TextEditor

@inject TenantClient client
@inject ILogger<TenantCampaigns> logger
@inject IJSRuntime JSRuntime

@if (Templates == null)
{
    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
    <div class="col-sm-12">

            <div class="card-header">
              <div class="loading-bar"></div>
            </div>
     
    </div>
}
else
{
    <div class="row">
      <div class="col-sm-12">
        <div class="card">
            <div class="card-header">
                <h5>All Templates</h5>
                <button class="btn btn-primary" @onclick="OnNewClick"><span class="oi oi-plus"></span></button>            
            </div>
            <div class="card-body">
                <div class="table-responsive">
                   <table id="order-table" class="table table-striped table-bordered nowrap">
                        <thead>
                            <tr role="row">
                            <th>Template Name</th>
                            <th>IsActive</th>
                            <th>IsHtml</th>
                            <th>Campaign Type</th>
                            <th>Version</th>
                            <th>Preview</th>                  
                            </tr>
                        </thead>
                        <tbody> 
                            @foreach (var t in Templates)
                            {
                            <tr>
                           
                                <td>@t.Name </td>                        
                                <td>@t.IsActive</td>
                                <td>@t.IsHtml</td>
                                <td>@t.Type</td>
                                <td>@t.Version</td>
                  
                                <td>
                                                           
                                    <button  @onclick="() => OnPreviewClick(t)" title="View" class="btn btn-info btn-sm"><i class="fa fa-eye"></i></button>
                                    <button  @onclick="() => OnEditClick(t)" title="Edit" class="btn btn-primary btn-sm"><i class="fa fa-pencil-square-o"></i></button>
                                    <button  title="Delete" class="btn btn-danger btn-sm"><i class="fa fa-trash"></i></button>
                                </td>
                            </tr>
                }
                        </tbody>
                   </table>
                              @* <div style="float:right">
                                          <nav aria-label="Page navigation example">
                                              <ul class="pagination">
                                                            <li class="page-item"><button class="page-link" @onclick="Prevv">Previous</button></li>
                                                            <li class="page-item"><a class="page-link">@pageIndext</a></li>
                                                            <li class="page-item"><button class="page-link" @onclick="Nextt">Next</button></li>
                                              </ul>
                                          </nav>
                               </div>     *@                 
                    
                      @*<div class="modal fade sendTemplate" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-md" role="document">
                        <div class="modal-content">
                        <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Template Name</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group row">
                                <label for="txtReceiverName" class="col-form-label col-md-3" style="padding-right: 0;padding-left: 14px;">Receiver Name</label>
                                <div class="col-md-9">
                                    <input type="text" class="form-control" id="txtReceiverName">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="txtReceiverEmail" class="col-form-label col-md-3" style="padding-right: 0;">Receiver Email</label>
                                <div class="col-md-9">
                                    <input type="email" class="form-control" id="txtReceiverEmail">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="txtSenderEmail" class="col-form-label col-md-3" style="padding-right: 0;">Sender Email</label>
                                <div class="col-md-9">
                                    <input type="email" class="form-control" id="txtSenderEmail">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="txtSenderName" class="col-form-label col-md-3" style="padding-right: 0;">Sender Name</label>
                                <div class="col-md-9">
                                    <input type="text" class="form-control" id="txtSenderName">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="txtSubject" class="col-form-label col-md-3">Subject</label>
                                <div class="col-md-9">
                                    <input type="text" class="form-control" id="txtSubject">
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                        <button type="button" class="btn  btn-primary">Submit</button>
                        <button type="button" class="btn  btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                        </div>
                        </div>
                        </div>*@
                </div>
            </div>
        </div>
    </div>

</div>

}

<div class="edit-dialog-container">

    <DialogTemplate Show="showNewDialog" Title = "@Title" >
        
        <br/>
        @if (loading)
        {
               <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
                <div class="col-sm-12">

                        <div class="card-header">
                          <div class="loading-bar"></div>
                        </div>
     
                </div>
        }
        else
        {
          <Alerts IsError="@IsError" IsSuccess="@IsSuccess" Message=@Message></Alerts>
          <EditForm Model="@model" class="form" OnValidSubmit="OnSave">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="Name" class="form-label">Name Of Template</label>
                    <InputText id="Name" @bind-Value="model.Name" class="form-control" />
                </div>
                <div class="mb-3 form-check">
                    <InputCheckbox id="IsActive" @bind-Value="model.IsActive" class="form-check-input" />
                    <label for="IsActive" class="form-check-label">Is Active</label>
                </div>
                <div class="mb-3 form-check">
                    <InputCheckbox id="IsHtml" @bind-Value="model.IsHtml" class="form-check-input" />
                    <label for="IsHtml" class="form-check-label">Is Html</label>
                </div>
                <div class="mb-3">
                    <label for="Type" class="form-label">Campaign Type</label>
                    <InputSelect @bind-Value="model.Type" class="form-control" id="Type">
                        @foreach (var val in Enum.GetValues<CampaignType>())
                        {
                        <option value="@val">@val</option>
                        }
                    </InputSelect>
                </div>
            <div class="mb-3">
                <label for="Content" class="form-label">Template Content</label>
                <!-- Rich text editor -->
                <BlazoredTextEditor @ref="@QuillHtml">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-image"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>

                        @((MarkupString)model.Content)

                    </EditorContent>
                </BlazoredTextEditor>
                <div id="contentHelp" class="form-text">Content can be a rich text or html in case of email templates</div>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
            <button class="btn btn-secondary" @onclick="() => showNewDialog = false">Close</button>
          </EditForm>


        }


    </DialogTemplate>

</div>


<DialogTemplate Show="showPreview" Title="Template Preview">

    @previewContent

    <button @onclick="OnClosePreview">Close</button>

</DialogTemplate>

@code {

    [Parameter]
    public int Id { get; set; }

    public string Title
    {
        get
        {
            return model?.Id > 0 ? "Modify Template" : "Create New Template";
        }
    }
    string Message = string.Empty;
    bool IsError = false;
    bool IsSuccess = false;
    bool loading = false;

    bool showPreview = false;
    bool showNewDialog = false;
    string content = string.Empty;
    MarkupString previewContent => (MarkupString)content;

    List<CampaignTemplate> Templates;
    CampaignTemplate model;
    CampaignType? type = null;

    #region Blazore Text Editor

    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;

    public async Task GetHTML()
    {
        model.Content = await this.QuillHtml.GetHTML();
        StateHasChanged();
    }

    public async void SetHTML()
    {
        await this.QuillHtml.LoadHTMLContent(model.Content);

        StateHasChanged();
    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
        Templates = await client.GetTemplatesByType(type);

        await JSRuntime.InvokeAsync<IJSObjectReference>("import","/custom/assets/js/pages/form-select-custom.js");
        await JSRuntime.InvokeAsync<IJSObjectReference>("import","/custom/assets/js/plugins/jquery.dataTables.min.js");
        await JSRuntime.InvokeAsync<IJSObjectReference>("import","/custom/assets/js/plugins/dataTables.bootstrap4.min.js");
        await JSRuntime.InvokeAsync<IJSObjectReference>("import","/custom/assets/js/plugins/buttons.colVis.min.js");
        await JSRuntime.InvokeAsync<IJSObjectReference>("import","/custom/assets/js/plugins/dataTables.buttons.min.js");
        await JSRuntime.InvokeAsync<IJSObjectReference>("import","/custom/assets/js/pages/data-basic-custom.js");
        await JSRuntime.InvokeAsync<IJSObjectReference>("import","/custom/assets/js/plugins/jquery.bootstrap.wizard.min.js");


    }

    public void OnValidSubmit()
    {

    }

    protected void OnPreviewClick(CampaignTemplate template)
    {
        showPreview = true;
        content = template.Content;
    }

    protected void OnClosePreview()
    {
        content = string.Empty;
        showPreview = false;
    }

    public void OnNewClick()
    {
        Message = string.Empty;
        model = new CampaignTemplate();
        model.Version = "1";
        showNewDialog = true;
    }

    public void OnEditClick(CampaignTemplate template)
    {
        Message = string.Empty;
        model = template;
        showNewDialog = true;
    }

    public async Task OnSave()
    {
        loading = true;

        try
        {
            if (model.Id > 0)
                Message = "Successfully Updated";
            else
                Message = "Successfully Added";

            await GetHTML();

            model = await client.UpsertCampaignTemplate(model);

            ///showNewDialog = false;
            IsSuccess = true;

            if (!Templates.Any(o => o.Id == model.Id))
                Templates.Add(model);
        }
        catch (Exception ex)
        {
            IsError = true;
            Message = ex.Message;
            logger.LogCritical(ex, ex.Message);
        }

        loading = false;

    }

    int pageSize = 5;
    int pageIndex = 0;
    int pageIndext = 0;
    public void Prevv()
    {
        
        if(pageIndex>0){ pageIndex--;} 
        pageIndext = pageIndex;
       // Templates =  client.GetCampaignTemplates(pageIndex, pageSize);
    }
    public void Nextt()
    {
        pageIndex++; 
        pageIndext = pageIndex;
     
    }
}
