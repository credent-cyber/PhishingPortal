@page "/tenant-templates"

@using Microsoft.Extensions.Primitives
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.Dto
@using BlazingComponents.Summernote
@using PhishingPortal.UI.Blazor.Pages.GridButtons
@using PhishingPortal.UI.Blazor.Pages.GridComponent
@inject NavigationManager NavigationManager
@inject TenantClient client
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject AuthState authState;
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10 d-flex align-items-center">
                        Templates
                        

                        <LicencedView @ref="licencedViewRef" ShowLicenseWarning="false" AppModules="@AppModulesList" ReadOnly="true" IsButton="true">
                            @if (licencedViewRef?.CurrentMode == AccessMode.ReadWrite)
                            {
                                <a href="tenant-templates-config"><i class="fa fa-plus-circle fa-lg ml-1" aria-hidden="true" title="Create Template"></i></a>
                            }
                            else
                            {
                                <a><i class="fa fa-plus-circle fa-lg" aria-hidden="true" title="Create Template"></i></a>
                            }
                        </LicencedView>
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Templates</a></li>
                    <li class="breadcrumb-item"><a>All-Templates</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 p-0">
        <div class="card-body p-2 mt-n3">
            <div class="bt-wizard" id="tabswizard">
                <ul class="nav nav-pills">
                    <LicencedView @ref="licencedViewRef" ShowLicenseWarning="false" AppModule="AppModules.EmailCampaign" ReadOnly="true" IsButton="false">
                        <li class="nav-item">
                            <a href="#tabs-t-tab1" @onclick="Emailt" class="nav-link rounded-0 @(Tab == 1 ? "active" : "")" data-toggle="tab">
                                <h6 class="m-0">Email</h6>
                            </a>
                        </li>
                    </LicencedView>
                    <LicencedView @ref="licencedViewRef" ShowLicenseWarning="false" AppModule="AppModules.SmsCampaign" ReadOnly="true" IsButton="false">
                        <li class="nav-item">
                            <a href="#tabs-t-tab2" @onclick="Smst" class="nav-link rounded-0 @(Tab == 2 ? "active" : "")" data-toggle="tab">
                                <h6 class="m-0">SMS</h6>
                            </a>
                        </li>
                    </LicencedView>
                    <LicencedView @ref="licencedViewRef" ShowLicenseWarning="false" AppModule="AppModules.WhatsAppCampaign" ReadOnly="true" IsButton="false">
                        <li class="nav-item">
                            <a href="#tabs-t-tab3" @onclick="Whatsappt" class="nav-link rounded-0 @(Tab == 3 ? "active" : "")" data-toggle="tab">
                                <h6 class="m-0">WhatsApp</h6>
                            </a>
                        </li>
                    </LicencedView>
                </ul>

                <div class="tab-content card">
                    <div class="pt-1 bg-primary"></div>

                    <div class="tab-pane card-body pt-4 active show p-2" id="tabs-t-tab@Tab">
                        <div class="table-responsive">
                            @if (Tab == 1)
                            {
                                <LicencedView @ref="licencedViewRef" ShowLicenseWarning="false" AppModule="AppModules.EmailCampaign" ReadOnly="true">
                                    <EmailTemplateGrid />
                                </LicencedView>
                            }
                            @if (Tab == 2)
                            {
                                <LicencedView @ref="licencedViewRef" ShowLicenseWarning="false" AppModule="AppModules.SmsCampaign" ReadOnly="true">
                                    <SmsTemplateGrid />
                                </LicencedView>
                            }
                            @if (Tab == 3)
                            {
                                <LicencedView @ref="licencedViewRef" ShowLicenseWarning="false" AppModule="AppModules.WhatsAppCampaign" ReadOnly="true">
                                    <WhatsappTemplateGrid />
                                </LicencedView>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<DialogTemplate Show="showPreview" Title="Template Preview">
    <br />
    @if (sms)
    {
        <textarea class="col-sm-12" style="background-color:lavender; height:243px;" @bind="text" disabled></textarea>
    }
    else
    {
        @previewContent
    }
    <br />
    <button class="btn btn-warning col-md-12" @onclick="OnClosePreview">Close</button>
</DialogTemplate>

@code {
    private LicencedView licencedViewRef;
    bool showPreview = false;
    string content = string.Empty;
    bool IsError = false;
    bool IsSuccess = false;
    string text = "";
    bool sms = false;
    MarkupString previewContent => (MarkupString)content;

    protected override async Task OnInitializedAsync()
    {
        Tab = await oLocalStore.GetItemAsync<int>("tTab");
        if (Tab == 0)
            Tab = 1;
    }

    public void OnPreviewClick(CampaignTemplate template)
    {
        if (template.Type == CampaignType.Email)
        {
            sms = false;
            content = template.Content;
        }
        if (template.Type == CampaignType.Sms)
        {
            sms = true;
            text = template.Content;
        }
        showPreview = true;
    }

    protected void OnClosePreview()
    {
        content = string.Empty;
        showPreview = false;
    }

    public int Tab = 1;

    public async Task SaveSession()
    {
        await oLocalStore.SetItemAsync("tTab", Tab);
    }

    public async Task Emailt()
    {
        Tab = 1;
        await SaveSession();
    }

    public async Task Smst()
    {
        Tab = 2;
        await SaveSession();
    }

    public async Task Whatsappt()
    {
        Tab = 3;
        await SaveSession();
    }

    private List<AppModules> AppModulesList => new List<AppModules>
    {
        AppModules.EmailCampaign,
        AppModules.SmsCampaign,
        AppModules.WhatsAppCampaign
    };
}
