@page "/tenant-campaign-config"
@page "/tenant-campaign-config/{Id:int}"

@using PhishingPortal.Common
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using System.Text.RegularExpressions
@using PhishingPortal.UI.Blazor.Shared.TenantCampaingConfig

@inject TenantClient client
@inject ILogger<TenantCampaigns> logger
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel

@if (model == null || isloading)
{
    
    <div class="col-sm-12" style="margin-top:45vh">

            <div class="card-header">
              <div class="loading-bar"></div>
            </div>
     
    </div>
}
else
{
    <div class="pcoded-content" style="padding-top: 10px;">

        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header bg-info" style="padding:15px !important;">
                        <h5 class="text-white">@Title</h5>
                          <div style="float:right">
                               <a @onclick="onClose" style="cursor:pointer;"><i class="fa fa-times-circle" aria-hidden="true"></i></a>
                          </div>
                    </div>
                       <div class="card-body" style="padding-top: 20px;">
                         <div class="row">
                             <Alerts IsError="@IsError" IsSuccess="@IsSuccess" Message=@message></Alerts>

                   
                             <div class="row">
                                 <div class="col-md-6">
                                    <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
                                        <div class="card" style="margin-bottom: 0;">
                                     
                                            <div class="card-body">
                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3" style="padding-right: 0;">Campaign Name<span style="color:red">*</span></label>
                                                    <div class="col-md-9">
                                                         <InputText @bind-Value="@model.Name" id="Name" class="form-control"></InputText>                                                  
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3">Template Category</label>
                                                    <div class="col-md-9">
                                                        <InputSelect @bind-Value="model.Detail.Type" class="form-control" id="CampaignType" disabled="disabled">
                                                            @foreach (var val in Enum.GetValues(typeof(CampaignType)))
                                                                {
                                                                <option value="@val">@val</option>
                                                                }
                                                        </InputSelect>
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3">Select Template </label>
                                                    <div class="col-md-9">
                                                        <InputSelect @bind-Value="model.Detail.CampaignTemplateId" class="form-control" id="CampaignTemplateId">
                                                            @foreach (var val in Templates.OrderBy(o=>o.Name))
                                                                {
                                                                <option value="@val.Id">@val.Name</option>
                                                                }
                                                        </InputSelect>
                                                    </div>
                                                </div>
            
                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3" style="padding-right: 0;">Sender(Phishing) Email<span style="color:red">*</span></label>
                                                    <div class="col-md-9">
                                                        <InputText @bind-Value="@model.FromEmail" id="FromEmail" class="form-control"></InputText>
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3" style="padding-right: 0;">Return Page<span style="color:red">*</span></label>
                                                    <div class="col-md-9">
                                                        <InputText @bind-Value="@model.ReturnUrl" id="ReturnUrl" class="form-control"></InputText>
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3" style="padding-right: 0;">Subject<span style="color:red">*</span></label>
                                                    <div class="col-md-9">
                                                        <InputText @bind-Value="@model.Subject" id="Subject" class="form-control"></InputText>
                                                    </div>
                                                </div>
                                                 <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3" style="padding-right: 0;">Description</label>
                                                    <div class="col-md-9">
                                                         <InputText @bind-Value="@model.Description" id="Description" class="form-control"></InputText>
                                                    </div>
                                                </div>
                                                 <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3" style="padding-right: 0;">Category<span style="color:red">*</span></label>
                                                    <div class="col-md-9">
                                                      @* <InputText @bind-Value="@model.Category" id="Category" class="form-control"></InputText>
                                                       <div id="contentHelp" class="form-text">Eg. Clicks, Offers, IT Services, Banking & Finance, etc.</div>*@
                                                       <InputSelect @bind-Value="model.Category" class="form-control" id="Category">

                                                                <option>-Select-</option>
                                                                <option value="Clicks">Clicks</option>
                                                                <option value="Offers">Offers</option>
                                                                <option value="ITServices">IT Services</option>
                                                                <option value="Banking">Banking</option>
                                                                <option value="Finance">Finance</option>

                                                        </InputSelect>
                                                    </div>
                                                </div>
                

                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3">Schedule</label>
                                                    <div class="col-md-5">
                                                    @if(isScheduled == false)
                                                        {                                                            
                                                            <div class="radio radio-info radio-fill d-inline">
                                                                <input type="radio" name="radio-i-in-2" id="radio-i-infill-1" @onclick="OnScheduleTypeChange">
                                                                <label for="radio-i-infill-1" class="cr">Later</label>
                                                            </div>
                                                            <div class="radio radio-info radio-fill d-inline">
                                                                <input type="radio" name="radio-i-in-2" id="radio-i-infill-2" @onclick="OffScheduleTypeChange" checked>
                                                                <label for="radio-i-infill-2" class="cr">Now</label>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                             <div class="radio radio-info radio-fill d-inline">
                                                                <input type="radio" name="radio-i-in-2" id="radio-i-infill-1" @onclick="OnScheduleTypeChange" checked>
                                                                <label for="radio-i-infill-1" class="cr">Later</label>
                                                            </div>
                                                            <div class="radio radio-info radio-fill d-inline">
                                                                <input type="radio" name="radio-i-in-2" id="radio-i-infill-2" @onclick="OffScheduleTypeChange" >
                                                                <label for="radio-i-infill-2" class="cr">Now</label>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="form-group row" id="divSchedule" >
                                                    <div class="col-md-9 offset-md-3 row" style="padding: 0;">
 
                                                        <div class="col-12">
                                                                @if (model.Schedule.ScheduleType == ScheduleTypeEnum.NoSchedule)
                                                                {

                                                                }
                                                                @if(model.Schedule.ScheduleType == ScheduleTypeEnum.Once && isScheduled == true)
                                                                {
                                                                    <label class="form-label">Scheduled Once</label>
                                                                    <div class="input-group">
                                                                        <div class="input-group-prepend">
                                                                            <span class="input-group-text" id="">Date & Time</span>
                                                                        </div>
                                                                        <InputDate @bind-Value="scheduleOnceOff.Date" id="OnceOffScheduleDate" class="form-control"></InputDate>
                                                                        <input type="time" @bind="scheduleOnceOff.Time" id="OnceOffScheduleTime" class="form-control"></input>
                                                                    </div>

                                                                }
                                                                @*else if (model.Schedule.ScheduleType == ScheduleTypeEnum.Daily && isScheduled == true)
                                                                {
                                                                    <label class="form-label">Scheduled Daily</label>
                                                                    <div class="input-group mb-3">
                                                                        <div class="input-group-prepend">
                                                                            <span class="input-group-text" id="basic-addon3">Time Every Day</span>
                                                                        </div>
                                                                        <input type="time" @bind="dailySchedule.DailyScheduleTime" id="DailyScheduleTime"
                                                                       class="form-control" aria-describedby="basic-addon3"></input>
                                                                    </div>

                                                                }
                                                                else if (model.Schedule.ScheduleType == ScheduleTypeEnum.Weekly && isScheduled == true)
                                                                {
                                                                    <label class="form-label">Scheduled Weekly</label>
                                                                    <div class="input-group mb-3">
                                                                        <div class="input-group-prepend">
                                                                            <InputSelect @bind-Value="weeklySchedule.WeekDay" class="form-control" id="ScheduleWeekDay">
                                                                                @foreach (var val in Enum.GetValues<DayOfWeek>())
                                                                                {
                                                                                   <option value="@val">@val</option>
                                                                                }
                                                                            </InputSelect>
                                                                        </div>
                                                                        <input type="time" @bind="weeklySchedule.ScheduleTime" id="WeeklyScheduleTime" class="form-control" aria-describedby="basic-addon3"></input>
                                                                    </div>

                                                                }*@
                                                        </div>
                                                
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    <label for="txtImportUsers" class="col-form-label col-md-3">Import Users</label>
                                                    <div class="col-md-9">
                                                        <div class="input-group">
                                                        <InputSelect id="RecipientSources" @bind-Value="sources" class="form-control" @oninput="OnChangeRecipientSource">                                                         
                                                            @foreach (var val in Enum.GetValues<RecipientSources>())
                                                            {
                                                            <option value="@val">@val</option>
                                                            }
                                                        </InputSelect>                                 
                                                         <a class="btn btn-info" href="sample-data/Recipient_Sample.csv" target="_top">Template <i class="fas fa-download"></i></a>
                                                        </div>
                                                        <br/>
                                                        @if (sources == RecipientSources.Csv)
                                                        {
                                              
                                                            
                                                            <div class="form-group row">                                                             
                                                                <label for="" class="col-form-label col-md-3">Has Header Row</label>
                                                                <div class="col-md-5">
                                                                   <div class="radio radio-info radio-fill d-inline">
                                                                        <input type="radio" name="radio-i-in-3" id="chkHasHeader" @onclick="Header" checked>
                                                                        <label for="chkHasHeader" class="cr">Yes</label>
                                                                    </div>
                                                                    <div class="radio radio-info radio-fill d-inline">
                                                                        <input type="radio" name="radio-i-in-3" id="chkHasHeaderno" @onclick="NoHeader" >
                                                                        <label for="chkHasHeaderno" class="cr">No</label>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class="form-group row" id="divUploadUsers">
                                                                <label for="" class="col-form-label col-md-3">Select File</label>
                                                                <div class="col-md-9">
                                                                    <div class="input-group">
                                                                   
                                                                        @*<input type="file" id="uploadedFile" name="uploadedFile" class="form-control" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel">*@
                                                                        <InputFile OnChange="@OnInputFileChange" class="form-control" accept=".csv"/>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                             
                                                               
                                                        }
                                                        
                                                    </div>
                                                </div>

                                                @*<div class="form-group row" id="divSelectGroups" style="display: none;">
                                                    <label for="txtFilter" class="col-form-label col-md-3">Select Groups</label>
                                                    <div class="col-md-9">
                                                        <select class="js-example-responsive" style="width: 100%;" multiple="multiple">
                                                          <option value="testGroup1">testGroup1</option>
                                                          <option value="testGroup2">testGroup2</option>
                                                          <option value="testGroup3">testGroup3</option>
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3" style="padding-right: 0;">Batch Count</label>
                                                    <div class="col-md-3">
                                                        <input type="number" class="form-control" id="">
                                                    </div>
                                                    <label for="" class="col-form-label col-md-3" style="padding-right: 0;">Batch Interval</label>
                                                    <div class="col-md-3">
                                                        <input type="number" class="form-control" id="">
                                                    </div>
                                                </div>*@
                                                <div class="form-group row">
                                                    <label for="" class="col-form-label col-md-3">State</label>
                                                    <div class="col-md-9">
                                                        <InputSelect readonly @bind-Value="model.State" class="form-control" id="State">
                                                            @foreach (var val in Enum.GetValues(typeof(CampaignStateEnum)))
                                                            {
                                                            <option value="@val">@val</option>
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                </div>
                                                <div class="btn-group col-12" >
                                                    <button type="submit" class="btn btn-primary">Save</button>
                                                    <button type="button" @onclick="onClose" class="btn btn-secondary">Close</button>
                                                    @if (model.Id == 0 && fileimport is null)
                                                    {
                                                        <button type="button" class="btn btn-dark"  @onclick="OnShowRecipientClickk" disabled>Show Recipients</button>                                                      
                                                    }
                                                    else
                                                    {
                                                        <button type="button" class="btn btn-dark"  @onclick="OnShowRecipientClickk" >Show Recipients</button>                                                      
                                                    }
                                                    @if (model.State == CampaignStateEnum.Draft && model.Id > 0)
                                                    {
                                                        <button @onclick="OnPublishClick" class="btn btn-warning  me-2" type="button">Publish </button>
                                                    }

                                                    @if (model.State == CampaignStateEnum.Published)
                                                    {
                                                        <button @onclick="OnUnpublish" class="btn btn-warning  me-2" type="button">UnPublish </button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </EditForm>
                                 </div>
                                     
                                 <div class="col-md-6" style="padding: 0;">
                                        <div class="card" style="margin-bottom: 0;">
                                            <div class="card-body">
                                                @if(model.Detail.CampaignTemplateId.Equals(null))
                                                {
                                                    <p style="margin-top:50%; text-align:center;">No Template Selected!</p>
                                                }
                                                else
                                                {
                                                    OnShowPreview(model.Detail.CampaignTemplateId);
                                                    @previewContent
                                                }
                                            </div>
                                        </div>
                                 </div>
                            
                             </div>
                    

                        </div>
                    </div>
                </div>
                 
            </div>
        </div>

    </div>
    <div>
              <DialogTemplate Title="Import Campaign Recipients" Show="showRecipientss" >
                  @if (showRecipientss)
                   {
                       
                            <Recipients DataList="recipients"></Recipients>

                            <button
                                @onclick="() => { this.showImportDialog = false; this.showRecipientss = false; this.sources = RecipientSources.None; recipients = new List<RecipientImport>(); }"
                                class="btn btn-secondary" type="button">Close</button>
                      
                  }
              </DialogTemplate>
              <DialogTemplate Title="Import Campaign Recipients" Show="showRecipients" >
                  @if (recipients?.Count() > 0)
                  {
                       <div style="padding-top: -50%">
                          <Recipients DataList="recipients" ></Recipients>
                          @*<button @onclick="OnImportRecipientClick" class="btn btn-primary" type="button">Import Recipients</button>
                          <button @onclick="OnCancelImportClick" class="btn btn-secondary" type="button">Cancel</button>*@
                          <button @onclick="() => { this.showImportDialog = false; this.showRecipients = false;}"
                                class="btn btn-secondary" type="button">Close</button>
                       </div>
                  }                                             
              </DialogTemplate>
    
    </div>
}


@code {


    [Parameter]
    public int Id { get; set; }
    List<RecipientImport> fileimport;

    string message = string.Empty;
    bool IsError = false;
    bool IsSuccess = false;
    bool HasHeader = true;
    Campaign model = null;

    bool showImportDialog = false;
    bool showRecipients = false;
    bool showRecipientss = false;
    bool showPreview = false;
    bool isloading = false;
    bool isScheduled = false;
    bool dailog = false;
    public string Title
    {
        get
        {
            return model?.Id > 0 ? "Modify Compaign" : "Create New Compaign";
        }
    }

    public bool ShowDialog
    {
        get
        {
            return showImportDialog || showRecipients;
        }

    }

    //IEnumerable<CampaignTemplate> Templates = new List<CampaignTemplate>();
    List<CampaignTemplate> Templates;
    CampaignType? type = null;

    OnceOffSchedule scheduleOnceOff = new();
    DailySchedule dailySchedule = new("12:00:00");
    WeeklySchedule weeklySchedule = new("1|12:00:00");

    RecipientSources sources;
    List<RecipientImport> recipients = new List<RecipientImport>();

    string content = string.Empty;
    MarkupString previewContent => (MarkupString)content;


    protected override async Task OnInitializedAsync()
    {
        //Templates = await client.GetCampaignTemplates();
         Templates = await client.GetTemplatesByType(type);

        if (Id != 0)
        {
            model = await client.GetCampaingById(Id);

            if (model.Schedule.ScheduleType == ScheduleTypeEnum.Once)
                scheduleOnceOff = new OnceOffSchedule(model.Schedule.ScheduleInfo);

            //if (model.Schedule.ScheduleType == ScheduleTypeEnum.Daily)
            //    dailySchedule = new DailySchedule(model.Schedule.ScheduleInfo);

            //if (model.Schedule.ScheduleType == ScheduleTypeEnum.Weekly)
            //    weeklySchedule = new WeeklySchedule(model.Schedule.ScheduleInfo);

            if (model.Schedule.ScheduleType == ScheduleTypeEnum.NoSchedule)
                isScheduled = false;
            else
            {
                isScheduled = true;
            }
        }
        else
        {
            model = new Campaign()
            {
                    State = CampaignStateEnum.Draft,
                    Detail = new CampaignDetail
                    {
                        CampaignTemplateId = Templates.FirstOrDefault().Id,
                        Type = CampaignType.Email,
                    },
                    Schedule = new CampaignSchedule
                    {
                        ScheduleType = ScheduleTypeEnum.NoSchedule,
                        WillRepeat = false
                    }
            };
        }

    }

    protected async Task OnValidSubmit()
    {
        message = string.Empty;

        if(@model.Name is null||@model.Subject is null||@model.FromEmail is null||@model.Category is null||@model.ReturnUrl is null)
        {
            IsError = true;
            message = "Please fill all the required field";
            return;
        } 
        @if(@model.FromEmail is not null)
        {
            var formate = Regex.IsMatch(@model.FromEmail, @".+@.+\..+");
            if(!formate)
            {
                 IsError = true;
                 message = "Invalid Phishing Email!";
                 return;
            }
        }

        isloading = true;
        UpdateModelScheduleInfo();

        try
        {
            model = await client.UpsertCampaignAsync(model);
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            IsError = true;
            message = "Error while updating";
        }
        @if (recipients.Count() > 0)
        {
            await OnImportRecipientClick();
        }
        isloading = false;
        IsSuccess = true;
        message = "Updated successfully";
    }

    //protected void OnScheduleTypeChange(ChangeEventArgs e)
    protected void OnScheduleTypeChange()
    {
        isScheduled = true;
        UpdateModelScheduleInfo();
    }
    protected void OffScheduleTypeChange()
    {
        isScheduled = false;
        //UpdateModelScheduleInfo();
    }
    protected void Header()
    {
        HasHeader = true;
    }
    protected void NoHeader()
    {
        HasHeader = false;
    }


    private void UpdateModelScheduleInfo()
    {

        if (isScheduled)
        {
            model.Schedule.ScheduleType = ScheduleTypeEnum.Once;
        }
        else
        {
            model.Schedule.ScheduleType = ScheduleTypeEnum.NoSchedule;
        }

        if (model.Schedule.ScheduleType == ScheduleTypeEnum.Once)
        {
            model.Schedule.ScheduleInfo = scheduleOnceOff.ToString();
        }

        if (model.Schedule.ScheduleType == ScheduleTypeEnum.Daily)
        {
            model.Schedule.ScheduleInfo = dailySchedule.ToString();
        }

        if (model.Schedule.ScheduleType == ScheduleTypeEnum.Weekly)
        {
            model.Schedule.ScheduleInfo = weeklySchedule.ToString();
        }

        if (model.Schedule.ScheduleType == ScheduleTypeEnum.NoSchedule)
        {
            model.Schedule.ScheduleInfo = string.Empty;
        }
    }

    protected void OnChangeRecipientSource(ChangeEventArgs arg)
    {
        if (arg.Value?.ToString() == RecipientSources.Csv.ToString())
        {
            this.showImportDialog = true;
        }
    }

    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var singleFile = e.File;
        IsError = false;
        message = string.Empty;
        isloading = true;
        Regex regex = new Regex(".+\\.csv", RegexOptions.Compiled);
        if (!regex.IsMatch(singleFile.Name))
        {
            IsError = true;
            message = "This file format not supported";
        }
        else
        {
            var stream = singleFile.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            var outputFileString = System.Text.Encoding.UTF8.GetString(ms.ToArray());
            var index = 0;

            foreach (var item in outputFileString.Split(Environment.NewLine))
            {
                if (HasHeader && index == 0)
                {
                    index++;
                    continue;
                }
                if(item.Equals(string.Empty)) { continue; }

                try
                {

                    var arr = SplitCSV(item.ToString(), AppConfig.ImportRecipientCsvMinColumns);
                    if (arr != null)
                    {
                        if (!recipients.Any(o => o.Email == arr[1]))
                        {
                            var r = new RecipientImport
                            {
                                    EmployeeCode = arr[0],
                                    Name = arr[1],
                                    Email = arr[2],
                                    Mobile = arr[3],
                                    DateOfBirth = arr[4],
                                    Department = arr[5],
                                    Branch = arr[6],
                                    Address = arr[7]
                            };

                            r.Validate();

                            if(!recipients.Any(i => i.Email == r.Email))
                                recipients.Add(r);
                        }



                    }

                    fileimport = recipients;
                }
                catch (Exception ex)
                {
                    IsError = true;
                    message = ex.Message;

                }
                isloading = false;

            }

        }
        isloading = false;
        showRecipients = true;
    }

    private string[] SplitCSV(string input, int colCount)
    {
        //Excludes commas within quotes
        Regex csvSplit = new Regex("(?:^|,)(\"(?:[^\"]+|\"\")*\"|[^,]*)", RegexOptions.Compiled);
        List<string> list = new List<string>();
        string curr = null;
        foreach (Match match in csvSplit.Matches(input))
        {
            curr = match.Value;
            if (0 == curr.Length) list.Add("");

            list.Add(curr.TrimStart(','));
        }

        if (list.Count() < colCount)
            throw new Exception("Invalid columns specified in the CSV file");

        return list.ToArray();
    }

    protected void OnCancelImportClick()
    {
        recipients.Clear();
        isloading = false;
        this.showImportDialog = false;
        this.showRecipients = false;
    }

    //    model = await client.UpsertCampaignAsync(model);

    protected async Task OnImportRecipientClick()
    {
        showImportDialog = false;
        isloading = true;
        try
        {
            var data = await client.ImportRecipientToCampaign(model.Id, recipients);
            recipients = data;
            IsSuccess = true;
            message = "Successfully imported";
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            IsError = true;
            message = "Recipient couldn't not be imported, please try again";
        }
        isloading = false;
        this.showRecipients = false;
    }

    private async Task LoadRecipeints(int id)
    {
        var data = await client.GetRecipientByCampaignId(id);

        recipients = data.Select(o => new RecipientImport
                {
                    EmployeeCode = o.Recipient.EmployeeCode,
                    Name = o.Recipient.Name,
                    Email = o.Recipient.Email,
                    Mobile = o.Recipient.Mobile,
                    Branch = o.Recipient.Branch,
                    Department = o.Recipient.Department,
                    Address = o.Recipient.Address,
                    DateOfBirth = o.Recipient.DateOfBirth

                }).ToList();
    }

    protected async Task OnShowRecipientClickk()
    {

        this.showImportDialog = false;
        this.showRecipientss = true;

        isloading = true;
        try
        {
            if(model.Id > 0)
            {
                await LoadRecipeints(model.Id);
            }
            else
            {
                recipients = fileimport;
            }
            isloading = false;

        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            IsError = true;
            message = ex.Message;
            showRecipientss = false;
        }
    }
    protected async Task OnShowRecipientClick()
    {

        this.showImportDialog = false;
        this.showRecipients = true;

        isloading = true;
        try
        {
            var data = await client.GetRecipientByCampaignId(model.Id);

            recipients = data.Select(o => new RecipientImport
                {
                    EmployeeCode = o.Recipient.EmployeeCode,
                    Name = o.Recipient.Name,
                    Email = o.Recipient.Email,
                    Mobile = o.Recipient.Mobile,
                    Branch = o.Recipient.Branch,
                    Department = o.Recipient.Department,
                    Address = o.Recipient.Address,
                    DateOfBirth = o.Recipient.DateOfBirth

                }).ToList();

            isloading = false;

        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            IsError = true;
            message = ex.Message;
            showRecipients = false;
        }
    }

    protected async Task OnPublishClick()
    {
        await LoadRecipeints(model.Id);

        if(recipients.Count==0)
        {
            IsError = true;
            message = "Recipients can't be null";
            return; 
        }
        if(model.Subject is  null || model.FromEmail is null)
        {
            IsError = true;
            message = "Subject, Sender Email can't be null";

        }
        else
        {
            model.State = CampaignStateEnum.Published;
            await OnValidSubmit();         
        }
    }

    protected async Task OnUnpublish()
    {
        if (model.State == CampaignStateEnum.Published)
        {
            model.State = CampaignStateEnum.Draft;
            await OnValidSubmit();
        }
    }

    protected void OnShowPreview(int id)
    {
        var template = Templates.FirstOrDefault(o => o.Id == id);
        showPreview = true;
        content = template.Content;
    }
    protected void onClose()
    {
        //recipients.Clear();
        NavigationManager.NavigateTo("tenant-campaigns"); 
    }


}
