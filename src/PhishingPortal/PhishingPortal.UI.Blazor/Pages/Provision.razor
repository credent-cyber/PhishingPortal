@using Microsoft.Extensions.Primitives;
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using Microsoft.Extensions.Logging
@using PhishingPortal.UI.Blazor.Pages.GridButtons

@page "/provision"
@inject TenantAdminClient adminClient
@inject NavigationManager navMgr
@inject HttpClient HttpClient
@inject AuthState authState;
@attribute [Authorize]


<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Provision Client
                        <a href="onboard"><i class="fa fa-plus-circle fa-lg" aria-hidden="true" title="Create Campaign"></i></a>
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Provision Client</a></li>
                    
                </ul>
            </div>
        </div>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <td>UniqueId</td>
            <td>Name</td>
            <td>LicenseType</td>
            <td>LicenseExpiry</td>
            <td>ConfirmationLink</td>

        </tr>
    </thead>
    <tbody>
        @foreach (var t in AllTenants)
        {
            <tr>
                <td><a class="btn-link" href="edittenant/@t.UniqueId">@t.UniqueId</a></td>
                <td>@t.Name</td>
                <td>@t.LicenseType</td>
                <td>@t.LicenseExpiry</td>
                <td>@if(t.ConfirmationState == ConfirmationStats.Registered
                                && t.ConfirmationState != ConfirmationStats.MasterUser
                                && t.ConfirmationState != ConfirmationStats.Licensed)
                    {
                        <a class="btn-link" target="_blank" href="@t.ConfirmationLink">Confirm</a>
                    }
                    else
                    {
                        @t.ConfirmationState.ToString()
                    }
                </td>

            </tr>
        }
    </tbody>
</table>


@code {
    private GridComponent<Tenant> _gridComponent;
    private CGrid<Tenant> _grid;
    private Task _task;
    static bool filter = true;

    // Action<IGridColumnCollection<Tenant>> columns = c =>
    // {
    //     c.Add(o => o.UniqueId).SetWidth("30px").Css("table-bordered").Filterable(filter);
    //     c.Add(o => o.Name).Css("table-bordered").Filterable(filter);
    //     c.Add(o => o.LicenseType).Css("table-bordered").SetWidth("60px").Filterable(filter);
    //     c.Add(o => o.LicenseExpiry).Css("table-bordered").Filterable(filter);
    //     c.Add(o => o.ConfirmationLink).Css("table-bordered").SetWidth("60px").Filterable(filter);
    //     c.Add().Encoded(false).Sanitized(false).RenderComponentAs<ProvisionEditButton>().SetWidth("50px").Titled("Edit");
    // };
    // protected override async Task OnParametersSetAsync()
    // {
    //     string url = $"odata/Tenant";
    //     var query = new QueryDictionary<StringValues>();
       

    //     var client = new GridODataClient<Tenant>(HttpClient, url, query, false, "ordersGrid", columns, 10)
    //         .ClearFiltersButton(true)
    //         .SetStriped(true)
    //         .WithMultipleFilters()
    //         .WithGridItemsCount()
    //         .SetExcelExport(true, true, "Provisions")
    //         .ChangePageSize(true)
    //         .EmptyText("No Data Available!!")
    //         .SetKeyboard(true)
    //         .Searchable(true, false, false);


    //     _grid = client.Grid;
    //     _task = client.UpdateGrid();
    //     await _task;
    // }


    ProvisionTenantRequest request = new();

    List<Tenant> AllTenants = new List<Tenant>();

    protected override async Task OnInitializedAsync()
    {
        AllTenants = await adminClient.GetAllAsync();
    }

}
