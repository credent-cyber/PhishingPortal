@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models

@inject TenantClient client
@inject ILogger<TenantCampaigns> logger

<div class="row">
    <div class="card-body p-2 mt-n3">
        <div class="card">
            <div class="card-header">
                <h5>OnPremise AD Configurations</h5>
                <div class="col-auto" style=" width:200px; text-align:center; line-height:0px; float:right; margin-top: -2px;">
                    <UiAlerts Model="alert"></UiAlerts>
                </div>
                <div class="dropdown-divider"></div>
            </div>
            <div class="card-body">
                <EditForm Model="model" OnValidSubmit="OnSave">
                    <div class="form-row align-items-center">
                        <div class="form-group col-md-3">
                            <label for="cid">Domain</label>
                            <InputText @bind-Value="@model.Domain" id="Domain" class="form-control"></InputText>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="tid">Username</label>
                            <InputText @bind-Value="@model.Username" id="Username" class="form-control"></InputText>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="key">Password</label>
                            <InputText @bind-Value="@model.Password" id="Password" class="form-control"></InputText>
                        </div>
                        <div class="col-auto" style="margin-top:12px">
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {

    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    private Timer _timer;
    private int _delay = 1500;

    private OnPromiseADSettings model = new OnPromiseADSettings();

    private bool isError = false;
    private bool isSucess = false;
    private string message = string.Empty;
    private string password = string.Empty;

    private const string SecretMask = "*******************************************";

    protected override async Task OnInitializedAsync()
    {
        var settings = await client.GetSettings();
        alert?.Clear();
        if (settings.ContainsKey("ad_domain"))
            model = new OnPromiseADSettings(settings);


        password = model.Password;
        model.Password = SecretMask;
    }

    public async void OnSave()
    {
        if (model != null)
        {
            alert?.Clear();
            try
            {
                if (model.Password == SecretMask)
                {
                    model.Password = password;
                }

                var result = await client.UpsertSettings(model.ToSettingsDictionary());

                model = new OnPromiseADSettings(result);

                password = model.Password;
                model.Password = SecretMask;

                alert?.SetSuccess("saved!");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                alert?.SetError("Error while saving!");
                logger.LogError(ex, ex.Message);
            }
            _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
        }
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();

    }

}
