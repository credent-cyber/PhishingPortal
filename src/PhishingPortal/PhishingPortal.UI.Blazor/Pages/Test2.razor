@page "/gridsamplee"
@using GridShared.Events
@using Newtonsoft.Json.Linq
@using PhishingPortal.Dto
@using System.Drawing
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives

@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Helpers
@using PhishingPortal.UI.Blazor.Models
@using PhishingPortal.UI.Blazor.Shared.Components.Reports

@inject TenantClient client
@inject ILogger<TenantDashboard> logger
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthState authState;


<div style="overflow: hidden;width: 100vw;max-width: 95vw;margin-left: calc(50% - 48vw);">
    <GridComponent @ref="_gridComponent" T="CampaignLog" Grid="@_grid"></GridComponent>
</div>

@code {

    [Parameter]
    public int Id { get; set; }
    private List<CampaignLog> CampaignLogs = new List<CampaignLog>();
    private int total;
    private int hits;
    private int reported;
    private decimal pronePercent;

    private GridComponent<CampaignLog> _gridComponent;
    private CGrid<CampaignLog> _grid;
    private Task _task;
    private GridODataClient<CampaignLog> _client;

    private Task<ODataDTO<CampaignLog>> _task1;
    private static IEnumerable<SelectItem> _campaignType;
    private static IEnumerable<SelectItem> _categoty;
    private static IEnumerable<SelectItem> _department;


    private bool _eventHooked = false;
    private List<int> Years;
    public int Year { get; set; } = DateTime.Now.Year;

    Action<IGridColumnCollection<CampaignLog>> columns = c =>
    {
        c.Add(o => o.Id).Titled("LogID").SetWidth("30px").Css("table-bordered");
        c.Add(o => o.Camp.Id).Titled("CampID").SetWidth("30px").Css("table-bordered");
        c.Add(o => o.Camp.Name).Css("table-bordered").Titled("Campaign Name"); ;
        c.Add(o => o.CampignType).Css("table-bordered").SetWidth("60px").SetListFilter(_campaignType);
        c.Add(o => o.Camp.Category).Css("table-bordered").SetWidth("60px").Titled("Category").SetListFilter(_categoty);
        c.Add(o => o.Recipient.Recipient.Email).Css("table-bordered").SetWidth("60px").Titled("Recipient Email");
        c.Add(o => o.Recipient.Recipient.Department).Css("table-bordered").SetWidth("60px").Titled("Department");
        c.Add(o => o.IsHit).Css("table-bordered");
        c.Add(o => o.IsReported).Css("table-bordered");
        c.Add(o => o.CreatedOn).Css("table-bordered");

    };

    protected override void OnAfterRender(bool firstRender)
    {
        _gridComponent.AfterRefreshGrid += AfterRefreshGrid;
    }

    private async Task AfterRefreshGrid()
    {

        var grid = _gridComponent.Grid as CGrid<CampaignLog>;

        if (grid != null)
        {
            //Calculate(grid);

            var c = GetTotalIsHits();
            StateHasChanged();
        }

        await Task.CompletedTask;
    }


    protected override async Task OnParametersSetAsync()
    {
        _campaignType = new List<SelectItem>
        {
        new SelectItem("Email", "Email"),
        new SelectItem("Sms", "Sms"),
        new SelectItem("Whatsapp", "Whatsapp"),
        };
        _categoty = new List<SelectItem>
        {
        new SelectItem("Clicks", "Clicks"),
        new SelectItem("Offers", "Offers"),
        new SelectItem("Banking", "Banking"),
        new SelectItem("ITServices", "ITServices"),
        new SelectItem("Finance", "Finance"),
        new SelectItem("Verification", "Verification"),
        };

        //** Init SetListFilter on the top of this funtion **//       
        // var urls = NavigationManager.BaseUri + $"Odata/Campaignlog?t={authState.TenantIdentifier}&$apply=groupby((CampignType))";
        //_task1 = HttpClient.GetFromJsonAsync<ODataDTO<CampaignLog>>(urls);
        //var campaign = await _task1;
        //if (campaign == null || campaign.Value == null)
        //{
        //    _campaignType = new List<SelectItem>();
        //}
        //else
        //{
        //     _campaignType = campaign.Value.Select(r => new SelectItem(r.CampignType, r.CampignType)).ToList();
        //}


        string url = $"Odata/Campaignlog?t={authState.TenantIdentifier}";
        var query = new QueryDictionary<StringValues>();
        try
        {
            var client = new GridODataClient<CampaignLog>(HttpClient, url, query, false, "ordersGrid", columns, 50)
            .ChangePageSize(true)
            .Filterable()
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .Searchable(true, false, false);

            _grid = client.Grid;
            _task = client.UpdateGrid();
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
        }

        await _task.ContinueWith(async (st) =>
        {
            await Task.CompletedTask;
        });
        Years = await client.GetCampaignLogYears();

    }

    private async Task<int> GetTotalIsHits()
    {
        int page = 1;
        int pageSize = 50;
        int totalHits = 0;
        bool hasMoreData = true;

        while (hasMoreData)
        {
            string url = $"Odata/Campaignlog?t={authState.TenantIdentifier}&$skip={(page - 1) * pageSize}&$top={pageSize}";
            var response = await HttpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<IEnumerable<CampaignLog>>();

                if (data.Any())
                {
                    totalHits += data.Count(x => x.IsHit);
                    page++;
                }
                else
                {
                    hasMoreData = false;
                }
            }
            else
            {
                hasMoreData = false;
            }
        }

        return totalHits;
    }















}
