@page "/cmpgn/{TenantId}/{Key}/{Url?}"
@page "/cmp/{TenantId}/{Key}/{Url?}"

@* @page "/track" *@

@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client

@inject TenantClient client
@inject HttpClient httpClient
@inject ILogger<TenantCampaigns> logger
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime
@layout NoLayout
@attribute [AllowAnonymous]

<div class="auth-wrapper" style="background:skyblue !important;">
    <div style="width:600px;">
        <div class="card text-center">
            <h4>Oops!! That was a risky click...</h4>
            <b>You just got phished, luckily this was an <span style="color:red">phishing</span> simulation by your security teams!</b>
            <div style="background:gray">
                <i style="color:yellow; margin:3px">Shortly you will get some training link via email to learn how to avoid this type of click in future.</i>
            </div>
        </div>
    </div>
</div>


@code {
    public string Title { get; set; } = "Wait ....";

    [Parameter]
    public string Key { get; set; } = string.Empty;

    [Parameter]
    public string TenantId { get; set; } = string.Empty;

    [Parameter]
    public string Url { get; set; } = string.Empty;

    // Client details
    public string Ip { get; set; }
    public string Latitude { get; set; }
    public string Longitude { get; set; }
    public string City { get; set; }
    public string Region { get; set; }
    public string Country { get; set; }
    public string Browser { get; set; }
    public string OS { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get client details
        await GetClientDetails();

        try
        {
            var payload = new CampaignHitRequest
                {
                    Key = Key,
                    ClientDetails = new ClientDetails
                    {
                        Ip = Ip,
                        Latitude = Latitude,
                        Longitude = Longitude,
                        City = City,
                        Region = Region,
                        Country = Country,
                        Browser = Browser,
                        OS = OS
                    }
                };
            var result = await httpClient.PostAsJsonAsync($"api/tenant/campaign-hit?t={TenantId}", payload);
            result.EnsureSuccessStatusCode();

            if (result.IsSuccessStatusCode)
            {
                var content = await result.Content.ReadFromJsonAsync<ApiResponse<string>>();

                if (content != null)
                    Url = content.Result;

                // Redirect
                Redirect();
            }
            else
            {
                navigation.NavigateTo("/error");
            }
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            navigation.NavigateTo("/error");
        }
    }

    private async Task GetClientDetails()
    {
        try
        {
            // Call JavaScript function to get client details
            var dotNetObject = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("getClientDetails", dotNetObject);
        }
        catch (Exception ex)
        {
            logger.LogError($"Failed to retrieve client details: {ex.Message}");
        }
    }

    [JSInvokable]
    public void ReceiveClientDetails(ClientDetails details)
    {
        Ip = details.Ip;
        Latitude = details.Latitude;
        Longitude = details.Longitude;
        City = details.City;
        Region = details.Region;
        Country = details.Country;
        Browser = details.Browser;
        OS = details.OS;

       // logger.LogInformation($"Client Details: IP: {Ip}, Latitude: {Latitude}, Longitude: {Longitude}, City: {City}, Region: {Region}, Country: {Country}, Browser: {Browser}, OS: {OS}");
    }

    private void Redirect()
    {
        if (!string.IsNullOrEmpty(Url))
        {
            try
            {
                navigation.NavigateTo(Url);
            }
            catch (Exception ex)
            {
                logger.LogCritical(ex, ex.Message);
            }
        }
        else
        {
            navigation.NavigateTo("/");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            System.Threading.Thread.Sleep(2000);
            Redirect();
        }
    }

}

