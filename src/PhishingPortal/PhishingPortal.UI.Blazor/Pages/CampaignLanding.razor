@page "/cmpgn/{TenantId}/{Key}/{Url?}"
@page "/cmp/{TenantId}/{Key}/{Url?}"

@*<h3>@Title</h3>*@
@attribute [AllowAnonymous]
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client

@inject TenantClient client
@inject HttpClient httpClient;
@inject ILogger<TenantCampaigns> logger
@inject NavigationManager navigation
@layout NoLayout

<div class="auth-wrapper" style="background:skyblue !important;">
        <div style="width:600px;">
            <div class="card text-center">
                <h4>Oops!! That was a risky click...</h4>
                <b>You just got phished, luckily this was an <span style="color:red">phishing</span> simulation by your security teams!</b>
                <div style="background:gray">
                <i style="color:yellow; margin:3px">Shorly you will get some training link via email to learn how to avoid this type of click in future.</i>
                </div>
            </div>
        </div>
</div>

@code {

    public string Title { get; set; } = "Wait ....";

    [Parameter]
    public string Key { get; set; } = string.Empty;

    [Parameter]
    public string TenantId { get; set; } = string.Empty;

    [Parameter]
    public string Url { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // load campaign data
        // validate campaign
        // update campaign hit if valid

        try
        {
            var payload = new GenericApiRequest<string>() { Param = Key };
            var result = await httpClient.PostAsJsonAsync<GenericApiRequest<string>>($"api/tenant/campaign-hit?t={TenantId}", payload);
            result.EnsureSuccessStatusCode();

            if (result.IsSuccessStatusCode)
            {
                var content = await result.Content.ReadFromJsonAsync<ApiResponse<string>>();

                if (content != null)
                    Url = content.Result;

               // System.Threading.Thread.Sleep(5000);
                Redirect();
            }
            else
            {
                navigation.NavigateTo("/error");
            }

        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            navigation.NavigateTo("/error");
        }

        await Task.CompletedTask;
    }

    private void Redirect()
    {
        if (!string.IsNullOrEmpty(Url))
        {
            try
            {
                navigation.NavigateTo(Url);
            }
            catch (Exception ex)
            {
                logger.LogCritical(ex, ex.Message);
            }
        }
        else
        {
            navigation.NavigateTo("/");
        }
    }



}
