@page "/tenant-campaigns"
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using static PhishingPortal.Common.Constants
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using PhishingPortal.UI.Blazor.Pages.GridButtons
@using System.Text.Json
@using System.Text
@using PhishingPortal.UI.Blazor.Pages.GridComponent
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthState authState;
@inject TenantClient client
@inject ILogger<TenantCampaigns> logger
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@attribute [Authorize]

  <div class="row">
     <div class="col-sm-12">
        <div class="card">
            <div class="card-header" style="padding:25px 25px 0px;">
                <h5 style="top:-4px">Recent Campaigns</h5>
                <a href="tenant-campaign-config"><i class="fa fa-plus-circle fa-2x" aria-hidden="true" title="Create Campaign"></i></a>
                <div style="float:right">
                        <ol class="breadcrumb float-sm-right">
                            <li class="breadcrumb-item"><a href="/">Home</a></li>
                            <li class="breadcrumb-item active">Campaigns</li>
                        </ol>
                </div>
            </div>
       
            <div class="card-body">
                <div class="col-md-12" style="padding: 0;">
                    <div class="bt-wizard" id="tabswizard">
                           <ul class="nav nav-pills">
                                @if(CTab == 1)
                                {
                                <li class="nav-item"><a href="#tabs-t-tab1" @onclick="Emailc" class="nav-link rounded-0 active" data-toggle="tab">Email</a></li>
                                <li class="nav-item"><a href="#tabs-t-tab2" @onclick="Smsc" class="nav-link rounded-0" data-toggle="tab">SMS</a></li>
                                <li class="nav-item"><a href="#tabs-t-tab3" @onclick="Whatsappc" class="nav-link rounded-0" data-toggle="tab">Whatsapp</a></li>
                                }
                                @if(CTab == 2)
                                {
                                <li class="nav-item"><a href="#tabs-t-tab1" @onclick="Emailc" class="nav-link rounded-0 " data-toggle="tab">Email</a></li>
                                <li class="nav-item"><a href="#tabs-t-tab2" @onclick="Smsc" class="nav-link rounded-0 active" data-toggle="tab">SMS</a></li>
                                <li class="nav-item"><a href="#tabs-t-tab3" @onclick="Whatsappc" class="nav-link rounded-0" data-toggle="tab">Whatsapp</a></li>
                                }
                                @if(CTab == 3)
                                {
                                <li class="nav-item"><a href="#tabs-t-tab1" @onclick="Emailc" class="nav-link rounded-0 " data-toggle="tab">Email</a></li>
                                <li class="nav-item"><a href="#tabs-t-tab2" @onclick="Smsc" class="nav-link rounded-0" data-toggle="tab">SMS</a></li>
                                <li class="nav-item"><a href="#tabs-t-tab3" @onclick="Whatsappc" class="nav-link rounded-0 active" data-toggle="tab">Whatsapp</a></li>
                                }

                           </ul>
                           <div class="tab-content card">
                               <div class="pt-1 bg-primary"></div>
                                @if(CTab == 1)
                                {                                    
                                   <div class="tab-pane card-body pt-4 active show" id="tabs-t-tab1">
                                      <div class="table-responsive">
                                           <EmailCamp />
                                      </div>
                                   </div>
                                }
                                @if(CTab == 2)
                                {                                                 
                                      <div class="tab-pane card-body pt-4 active show" id="tabs-t-tab2">
                                           <div class="table-responsive">
                                            <SmsCamp />
                                           </div>
                                      </div>
                                }
                                @if(CTab == 3)
                                {                                    
                                        <div class="tab-pane card-body pt-4 active show" id="tabs-t-tab3">
                                           <div class="table-responsive">
                                              <WhatsappCamp />
                                           </div>
                                        </div>                       
                                }
                           </div>
                    </div>
                </div>
            </div>
        </div>
     </div>
  </div>


@code {
    
    string message = string.Empty;
    int CTab = 1;

    protected override async Task OnInitializedAsync()
    {
        CTab = await oLocalStore.GetItemAsync<int>(LocalStorage.C_TAB);
        CTab = CTab == 0 ? 1 : CTab;
    }
    public async void SaveSession()
    {
        await oLocalStore.SetItemAsync("cTab", CTab);
    }


    public void Emailc() { CTab = 1;  SaveSession(); }
    public void Smsc() { CTab = 2; SaveSession(); }
    public void Whatsappc() { CTab = 3; SaveSession(); }

    private CGrid<Campaign> _grid;
    private Task _task;
    private GridComponent<Campaign> Component;

    Action<IGridColumnCollection<Campaign>> columns = c =>
    {
        // c.Add(o => o.Id).SetWidth("50px").Css("table-bordered").Sortable(true).SortInitialDirection(GridSortDirection.Descending).ThenSortByDescending(o => o.Id);
        c.Add(o => o.Id).SetWidth("50px").Css("table-bordered").Sortable(true);
        c.Add(o => o.Name).Css("table-bordered");
        c.Add(o => o.Description).Css("table-bordered");
        c.Add(o => o.Detail.Type).Titled("Type").SetWidth("50px").Css("table-bordered");
        c.Add(o => o.Schedule.ScheduleType).Css("table-bordered").Titled("Schedule Type");
        c.Add(o => o.Schedule.ScheduleInfo).Css("table-bordered").Titled("Schedule Info");
        c.Add(o => o.State).Css("table-bordered").Titled("Status");
        //c.Add(o => o.IsActive, true).SetWidth("50px").Css("table-bordered");
        c.Add().Encoded(false).Sanitized(false).RenderComponentAs<CampEdit>();
    };

    protected override async Task OnParametersSetAsync()
    {
        string url = $"odata/campaign?t={authState.TenantIdentifier}";
        var query = new QueryDictionary<StringValues>();
        query.Add("grid-filter", "Detail.Type__1__Email");
        //query.Add("grid-filter", "Id__1__12");

        var client = new GridODataClient<Campaign>(HttpClient, url, query, false, "ordersGrid", columns, 10)
            .Sortable(true)
            .Filterable(true)
            .SetRowCssClasses(x => (x.Id) % 2 == 1 ? "gridEcolor" : "gridOcolor")
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .SetExcelExport(true, "Report.xlsx")
            .ChangePageSize(true)
            .EmptyText("-")
            .SetKeyboard(true)
            .Searchable(true, false, false);
           //.SetTableLayout(TableLayout.Fixed, "1200px", "400px");

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }
   
}
