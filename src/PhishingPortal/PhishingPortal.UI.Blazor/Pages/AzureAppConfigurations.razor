@page "/az-config"
@using PhishingPortal.Dto
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models

@inject TenantClient client
@inject ILogger<TenantCampaigns> logger

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">Azure App Configuration</h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Settings</a></li>
                    <li class="breadcrumb-item"><a>Azure-Configuration</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="row m-1">
    @* <UiAlerts Model="alert"></UiAlerts> *@
    <EditForm Model="model" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <div class="form-group row mt-1">
            <label class="col-form-label col-md-2 bold-font" style="padding-right: 0;">Client ID</label>
            <div class="col-md-10">
                <InputText @bind-Value="@model.ClientID" id="ClientID" class="form-control"></InputText>
                <ValidationMessage For="() => model.ClientID" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-form-label col-md-2 bold-font" style="padding-right: 0;">Client Secret</label>
            <div class="col-md-10">
                <InputText @bind-Value="@model.ClientSecret" id="Clientkey" class="form-control"></InputText>
                <ValidationMessage For="() => model.ClientSecret" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-form-label col-md-2 bold-font" style="padding-right: 0;" for="cid">Tenant ID</label>
            <div class="col-md-10">
                <InputText @bind-Value="@model.TenantID" id="TenantID" class="form-control"></InputText>
                <ValidationMessage For="() => model.TenantID" />
            </div>
        </div>
        <hr />
        <div class="mt-4" style="text-align:left;">
            <button type="submit" class="btn btn-primary col-md-1">Save</button>
        </div>
    </EditForm>
    <Dailog Title="@message" Show="@show" OnCloseDialog="ResetForm">
        @if (show)
        {
            @if (TaskCompleted)
            {
                <div style="text-align:center;">
                    @MessageBody
                </div>
            }
            else
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
        }

    </Dailog>
</div>


@code {

    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    private Timer _timer;
    private int _delay = 1500;

    bool IsError = false;
    bool IsSuccess = false;
    bool TaskCompleted = false;

    private bool show = false;
    string MessageBody = "Thank you!";

    private AzureRegistrationSettings model = new AzureRegistrationSettings();


    private string message = string.Empty;
    private string secret = string.Empty;

    private const string SecretMask = "*******************************************";

    protected override async Task OnInitializedAsync()
    {
        var settings = await client.GetSettings();
        alert?.Clear();
        if (settings.ContainsKey("az_client_id"))
            model = new AzureRegistrationSettings(settings);


        secret = model.ClientSecret;
        model.ClientSecret = SecretMask;
    }

    public async void OnSave()
    {

        if (model != null)
        {
            message = string.Empty;
            MessageBody = "Thank you!";
            IsError = false;
            IsSuccess = false;
            show = true;
            TaskCompleted = false;

            //alert?.Clear();
            try
            {
                message = "Please wait";
                if (model.ClientSecret == SecretMask)
                {
                    model.ClientSecret = secret;
                }

                var result = await client.UpsertSettings(model.ToSettingsDictionary());

                model = new AzureRegistrationSettings(result);

                secret = model.ClientSecret;
                model.ClientSecret = SecretMask;

                //alert?.SetSuccess("saved!");
                message = "Saved!";
                TaskCompleted = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                //alert?.SetError("Error while saving!");

                logger.LogError(ex, ex.Message);
                IsError = true;
                message = "Error!";
                MessageBody = ex.Message;
                TaskCompleted = true;
            }
            // _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
        }
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();

    }
    private void ResetForm()
    {
        show = false;
    }
}
