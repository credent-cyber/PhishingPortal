@page "/report"
@page "/report/{id:int}/{Label?}"
@page "/report/{data}/department/{depart}"
@page "/report/{data}/category/{categ}"
@page "/report/{data}/template/{tempid:int}"

@using GridShared.Events
@using Newtonsoft.Json.Linq
@using PhishingPortal.Dto
@using System.Drawing
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives

@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Helpers
@using PhishingPortal.UI.Blazor.Models
@using PhishingPortal.UI.Blazor.Shared.ChartJs
@using PhishingPortal.UI.Blazor.Shared.Components.Reports

@inject TenantClient client
@inject ILogger<TenantDashboard> logger
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthState authState;
@attribute [Authorize]

<div class="pcoded-content" style="padding: 0 20px !important;">
    @*<h5><span style="color:orange;">Report Details</span></h5>*@
    <div class="row">
        <div class="col-xl-6 col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Statistics</h5>
                </div>
                <div class="card-body">
                    <div style="width: 100%;">
                        <Chart Id="bar1" Type="@ChartType.bar" Datasets="@BarChart1Data"
                               Labels="@BarChart1Labels" IsStacked="false" IsClickable="false" AspectRatio=false>
                        </Chart>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-md-6">
            <div class="card">
                <div class="card-body" style="padding:9px !important">
                    <div style="width: 100%;">
                        <DrillDown_Summary Total="total" Hits="hits" Reported="reported" PronePercent="pronePercent" />
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>

<div style="overflow: hidden;width: 100vw;max-width: 95vw;margin-left: calc(50% - 48vw);">
    <GridComponent @ref="_gridComponent" T="CampaignLog" Grid="@_grid"></GridComponent>
</div>

@code {

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string depart { get; set; }
    [Parameter]
    public string categ { get; set; }
    [Parameter]
    public int TempId { get; set; }
    [Parameter]
    public string data { get; set; }
    [Parameter]
    public string Label { get; set; }

    public List<ChartJsDataset> BarChart1Data { get; set; } = new List<ChartJsDataset>();
    public string[] BarChart1Labels { get; set; }

    private List<CampaignLog> CampaignLogs = new List<CampaignLog>();
    private int total;
    private int hits;
    private int reported;
    private decimal pronePercent;

    public string[] GetBackgroundColors(Color color, int arraySize)
    {
        var colors = new List<string>();
        for (var i = 0; i < arraySize; i++)
            colors.Add(color.Name.ToString().ToLower());
        return colors.ToArray();
    }

    private GridComponent<CampaignLog> _gridComponent;
    private CGrid<CampaignLog> _grid;
    private Task _task;
    private GridODataClient<CampaignLog> _client;

    private bool _eventHooked = false;
    private bool _lock = false;
    private bool _reload = true;
    Action<IGridColumnCollection<CampaignLog>> columns = c =>
    {
        //c.Add(o => o.Id).Titled("LogID").SetWidth("30px").Css("table-bordered");
        c.Add(o => o.CampaignId).Titled("ID").SetWidth("30px").Css("table-bordered").Filterable(true);
        c.Add(o => o.Camp.Name).Css("table-bordered").Titled("Campaign Name").Filterable(true);
        c.Add(o => o.CampignType).Css("table-bordered").SetWidth("60px").Titled("Camp Type").Filterable(true);
        c.Add(o => o.Camp.Detail.CampaignTemplateId).Css("table-bordered").Titled("TempID").Filterable(true);
        c.Add(o => o.Camp.Category).Css("table-bordered").SetWidth("60px").Titled("Category").Filterable(true);
        c.Add(o => o.Recipient.Recipient.Email).Css("table-bordered").SetWidth("60px").Titled("Recipient Email").Filterable(true);
        c.Add(o => o.Recipient.Recipient.Department).Css("table-bordered").SetWidth("60px").Titled("Department").Filterable(true);
        c.Add(o => o.IsHit).Css("table-bordered").Filterable(true);
        c.Add(o => o.IsReported).Css("table-bordered").Filterable(true);
        c.Add(o => o.CreatedOn).Css("table-bordered").Filterable(true);

    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender && _lock == false){
            List<string> filterIds = new List<string>();
            if (depart != null || categ != null || TempId > 0)
            {
                filterIds.Add(id1.ToString()); filterIds.Add(id2.ToString()); filterIds.Add(id3.ToString()); filterIds.Add(id4.ToString()); filterIds.Add(id5.ToString());
                Filter(filterIds); 
            }
            else if (Id > 0)
            {
                filterIds.Add(Id.ToString());
                Filter(filterIds);
            }
            else{
                if (_reload) { Filter(filterIds); _reload = false; }
                _gridComponent.AfterRefreshGrid += AfterRefreshGrid;
            }
            _lock = true;
        }
    }


    public async void Filter(List<string> filterId)
    {
        IEnumerable<CampaignLog> logs;

        logs = await client.GetCampaignLog(filterId);
        if (depart != null){
            logs = logs.Where(o => o.Recipient.Recipient.Department.Equals(depart, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        else if (categ != null){
            logs = logs.Where(o => o.Camp.Category.Equals(categ, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        else if(TempId > 0)
        {
            logs = logs.Where(o => o.Camp.Detail.CampaignTemplateId == TempId).ToList();
        }


        total = logs.Count();
        hits = logs.Count(o => o.IsHit);
        reported = logs.Count(o => o.IsReported);
        if (total > 0)
            pronePercent = Math.Round(((decimal)hits / total) * 100, 2);



        StateHasChanged();
    }
    private async Task AfterRefreshGrid()
    {
        List<string> filterId = new List<string>(); 
        var grid = _gridComponent.Grid as CGrid<CampaignLog>;
        // var fdata = _gridComponent.Grid.Settings.FilterSettings.Query.Values.ElementAt(0);
        var fdata = _gridComponent.Grid.Settings.FilterSettings.Query.Values;
        if(fdata.Count>0){
            foreach (var item in fdata.ElementAt(0))
            {
                if (item.Contains("CampaignId") && item.Split("__")[1] == "1")
                {
                    var a = item.Split("__")[2];
                    filterId.Add(a);
                }
            }
        }
        _lock = false;

        if (grid != null)
        {
            Calculate(grid);
            if (grid.Items.ToList().Count() > 0)
                Filter(filterId);
            else
                total = 0; hits = 0; reported = 0; pronePercent = 0; StateHasChanged();
        }


        await Task.CompletedTask;
    }

    int id1, id2, id3, id4, id5;
    public void ExtractIds()
    {
        id1 = int.Parse(data.Split("a")[0]);
        id2 = int.Parse(data.Split("a")[1]);
        id3 = int.Parse(data.Split("a")[2]);
        id4 = int.Parse(data.Split("a")[3]);
        id5 = int.Parse(data.Split("a")[4]);
    }


    protected override async Task OnParametersSetAsync()
    {
        if (depart != null || categ != null || TempId > 0) { ExtractIds(); }
        string url = $"Odata/Campaignlog?t={authState.TenantIdentifier}";
        var query = new QueryDictionary<StringValues>();

        if (Id > 0)
        {
            var values = new string[] { $"Camp.Category__2__{categ}", "CampaignId__9__2", $"CampaignId__1__{id1}", $"CampaignId__1__{id2}", $"CampaignId__1__{id3}", $"CampaignId__1__{id4}", $"CampaignId__1__{id5}" };
            query.Add("grid-filter", new StringValues(values));
            query.Add("grid-filter", $"CampaignId__1__{Id}");
        }
        else if (categ != null){
            var values = new string[] { $"Camp.Category__2__{categ}", "CampaignId__9__2", $"CampaignId__1__{id1}", $"CampaignId__1__{id2}", $"CampaignId__1__{id3}", $"CampaignId__1__{id4}", $"CampaignId__1__{id5}" };
            query.Add("grid-filter", new StringValues(values));
        }
        else if (depart != null){
            var values = new string[] { $"Recipient.Recipient.Department__2__{depart}", "CampaignId__9__2", $"CampaignId__1__{id1}", $"CampaignId__1__{id2}", $"CampaignId__1__{id3}", $"CampaignId__1__{id4}", $"CampaignId__1__{id5}" };
            query.Add("grid-filter", new StringValues(values));
        }
        else if (TempId > 0){
            var values = new string[] { $"Camp.Detail.CampaignTemplateId__1__{TempId}", "CampaignId__9__2", $"CampaignId__1__{id1}", $"CampaignId__1__{id2}", $"CampaignId__1__{id3}", $"CampaignId__1__{id4}", $"CampaignId__1__{id5}" };
            query.Add("grid-filter", new StringValues(values));
        }

        try
        {
            var client = new GridODataClient<CampaignLog>(HttpClient, url, query, false, "ordersGrid", columns, 50)
             //.Sortable()
            .ChangePageSize(true)
            //.Filterable()
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .Searchable(true, false, false)
            .SetExcelExport(true, "Report.xlsx")
            //.SetTableLayout(TableLayout.Fixed, "1200px", "400px")
            .AddButtonComponent<CampaignLog>("test", "Print as PDF", (MarkupString)"<a href='/'><span class='oi oi-print' aria-hidden='false'></span></a>");


            _grid = client.Grid;
            _task = client.UpdateGrid();
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
        }

        await _task.ContinueWith(async (st) =>
        {
            Calculate(_grid);
            await Task.CompletedTask;
        });

    }

    private void Calculate(CGrid<CampaignLog> grid)
    {
        CampaignLogs = grid?.Items?.ToList() ?? Enumerable.Empty<CampaignLog>().ToList();
        //total = CampaignLogs.Count();
        //hits = CampaignLogs.Count(o => o.IsHit);
        //reported = CampaignLogs.Count(o => o.IsReported);

        if (total > 0)
        {
            pronePercent = Math.Round((decimal)hits / total * 100, 2);
        }

        var data = CampaignLogs.GroupBy(o => o.CampaignId, v => v, (k, v) => new
        {
            CampaignId = k,
            Logs = v,
        });

        BarChart1Labels = data.Select(o => o.Logs.First()?.Camp.Name ?? string.Empty).Distinct().ToArray();

        BarChart1Data.Clear();

        BarChart1Data.Add(new ChartJsDataset
            {
                Label = "Total",
                Data = data.Select(o => o.Logs.Count().ToString()).ToArray(),
                BackgroundColor = ColorHelper.GetBackgroundColors(Color.Green, data.Select(o => o.CampaignId).Count()),
            });

        BarChart1Data.Add(new ChartJsDataset
            {
                Label = "Hits",
                Data = data.Select(o => o.Logs.Count(o => o.IsHit).ToString()).ToArray(),
                BackgroundColor = ColorHelper.GetBackgroundColors(Color.OrangeRed, data.Select(o => o.CampaignId).Count()),
            });

        BarChart1Data.Add(new ChartJsDataset
            {
                Label = "Reported",
                Data = data.Select(o => o.Logs.Count(o => o.IsReported).ToString().ToString()).ToArray(),
                BackgroundColor = ColorHelper.GetBackgroundColors(Color.BlueViolet, data.Select(o => o.CampaignId).Count()),
            });
    }
}
