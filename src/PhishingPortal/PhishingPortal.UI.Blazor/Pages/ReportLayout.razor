@page "/report"
@page "/report/{id:int}/{Label?}"
@page "/report/{data}/department/{depart}"
@page "/report/{data}/category/{categ}"
@page "/report/{data}/template/{tempid:int}"

@using GridShared.Columns;
@using GridShared.Events;
@using GridShared.Filtering;
@using Microsoft.AspNetCore.WebUtilities;
@using Newtonsoft.Json.Linq;
@using PhishingPortal.Dto;
@using System.Drawing;
@using GridShared;
@using GridShared.Utility;
@using Microsoft.Extensions.Primitives;

@using PhishingPortal.UI.Blazor.Client;
@using PhishingPortal.UI.Blazor.Helpers;
@using PhishingPortal.UI.Blazor.Models;
@using PhishingPortal.UI.Blazor.Shared.ChartJs
@using PhishingPortal.UI.Blazor.Shared.Components.Reports;
@using Microsoft.AspNetCore.Components.Web.Virtualization;

@inject TenantClient client;
@inject ILogger<TenantDashboard> logger;
@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject AuthState authState;

<div id="myContent">
    <div class="pcoded-content" style="padding: 0 0px !important;">
        <div>
            <div class="row row-cols-1 row-cols-md-5 row-cols-lg-5 row-cols-xxl-5">
                <div class="col p-1">
                    <select onchange="@ChangeYear" class="form-select" id="selectYear" aria-label="Default select example" style="height:45px;background:brown; color:white">
                        @if (Years != null)
                        {
                            foreach (var year in Years.OrderByDescending(y => y))
                            {
                                if (year == Year)
                                {
                                    <option value="@year" selected> ▼ Data from @year </option>
                                }
                                else
                                {
                                    <option value="@year">@year</option>
                                }
                            }
                        }
                    </select>
                </div>
                <div class="col p-1">
                    <div class="card bg-facebook order-card mb-1">
                        <div class="card-body" style="padding:5px 25px !important">
                            <a>
                                <div class="row align-items-center m-b-0">
                                    <div class="col">
                                        <h6 class="text-white mb-0">Total </h6>
                                    </div>
                                    <div class="col-auto">
                                        <h3 style="color:black; margin-bottom: 0;">@total</h3>
                                    </div>
                                </div>
                            </a>
                        </div>

                    </div>
                </div>
                <div class="col p-1">
                    <div class="card bg-danger order-card mb-1">
                        <div class="card-body" style="padding:5px 25px !important">
                            <a>
                                <div class="row align-items-center m-b-0">
                                    <div class="col">
                                        <h6 class="text-white mb-0">Clicks</h6>
                                    </div>
                                    <div class="col-auto">
                                        <h3 style="color:black; margin-bottom: 0;">@hits</h3>
                                    </div>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="col p-1">
                    <div class="card bg-c-green order-card mb-1">
                        <div class="card-body" style="padding:5px 25px !important">
                            <a>
                                <div class="row align-items-center m-b-0">
                                    <div class="col">
                                        <h6 class="text-white mb-0">Reported</h6>
                                    </div>
                                    <div class="col-auto">
                                        <h3 style="color:black; margin-bottom: 0;">@reported</h3>
                                    </div>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="col p-1">
                    <div class="card bg-c-purple order-card mb-1">
                        <div class="card-body" style="padding:5px 25px !important">
                            <a>
                                <div class="row align-items-center m-b-0">
                                    <div class="col">
                                        <h6 class="text-white mb-0">Prone %</h6>
                                    </div>
                                    <div class="col-auto">
                                        <h3 style="color:black; margin-bottom: 0;">@pronePercent %</h3>
                                    </div>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-xl-12 col-md-12 p-1">
                <div class="card">
                    <div class="card-header p-2">
                        <h5>Statistics</h5>
                    </div>
                    <div class="card-body">
                        <div style="width: 100%; height: 210px;
}">
                            <Chart Id="bar1" Type="@ChartType.bar" Datasets="@BarChart1Data"
                                   Labels="@BarChart1Labels" IsStacked="false" IsClickable="false" AspectRatio=false>
                            </Chart>

                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div style="overflow: hidden; margin:-10px; margin-top:-35px">
        <GridComponent @ref="_gridComponent" T="CampaignLog" Grid="@_grid"></GridComponent>
    </div>
</div>



@code {

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string depart { get; set; }
    [Parameter]
    public string categ { get; set; }
    [Parameter]
    public int TempId { get; set; }
    [Parameter]
    public string data { get; set; }
    [Parameter]
    public string Label { get; set; }

    private List<CampaignLog> CampaignLogs = new List<CampaignLog>();

    private GridComponent<CampaignLog> _gridComponent;
    private CGrid<CampaignLog> _grid;
    private Task _task;

    private int total;
    private int hits;
    private int reported;
    private decimal pronePercent;

    public List<ChartJsDataset> BarChart1Data { get; set; } = new List<ChartJsDataset>();
    public string[] BarChart1Labels { get; set; }

    private List<int> Years;
    public int Year { get; set; } = DateTime.Now.Year;
    static bool filter = true;

    Action<IGridColumnCollection<CampaignLog>> columns = c =>
    {
        //c.Add(o => o.Id).Titled("LogID").SetWidth("30px").Css("table-bordered");
        c.Add(o => o.CampaignId).Titled("ID").SetWidth("30px").Css("table-bordered").Filterable(filter);
        c.Add(o => o.Camp.Name).Css("table-bordered").Titled("Campaign Name").Filterable(filter);
        c.Add(o => o.CampignType).Css("table-bordered").SetWidth("60px").Titled("Camp Type").Filterable(filter);
        c.Add(o => o.Camp.Detail.CampaignTemplateId).Css("table-bordered").Titled("TempID").Filterable(filter);
        c.Add(o => o.Camp.Category).Css("table-bordered").SetWidth("60px").Titled("Category").Filterable(filter);
        c.Add(o => o.Recipient.Recipient.Email).Css("table-bordered").SetWidth("60px").Titled("Recipient Email").Filterable(filter);
        c.Add(o => o.Recipient.Recipient.Mobile).Css("table-bordered").SetWidth("60px").Titled("Recipient Mobile").Filterable(filter);
        c.Add(o => o.Recipient.Recipient.Department).Css("table-bordered").SetWidth("60px").Titled("Department").Filterable(filter);

        c.Add(o => o.IsHit).Css("table-bordered").Filterable(filter);
        c.Add(o => o.IsReported).Css("table-bordered").Filterable(filter);
        c.Add(o => o.CreatedOn).Css("table-bordered").Format("{0:dd/MM/yyyy hh:mm:ss tt}").Filterable(filter);
    };


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var initialFilterQuery = _grid.Query.GetValueOrDefault("grid-filter");
            var initialSearchQuery = _grid.Query.GetValueOrDefault("grid-search");

            _gridComponent.FilterChanged += async (sender, args) =>
            {
                //if (_grid.Query.GetValueOrDefault("grid-filter") != initialFilterQuery)
                //{
                //    await OnFilterChanged();
                //}
                await OnFilterChanged();
            };

            _gridComponent.SearchChanged += async (sender, args) =>
            {
                //if (_grid.Query.GetValueOrDefault("grid-search") != initialSearchQuery)
                //{
                //    await OnFilterChanged();
                //}
                await OnFilterChanged();
            };

        }

    }

    private async Task OnFilterChanged()
    {


        if (!_grid.Query.GetValueOrDefault("grid-filter").Any(o => o.Contains("CreatedOn")))
        {
            var year = Int32.Parse(Year.ToString());
            var yearStartDate = new DateTime(year, 1, 1);
            var start = yearStartDate.Year + "-" + yearStartDate.Month + "-" + yearStartDate.Day;
            var yearEndDate = new DateTime(year, 12, 31).AddHours(24).AddSeconds(-1);
            var end = yearEndDate.Year + "-" + yearEndDate.Month + "-" + yearEndDate.Day;

            var filter = new FilterCollection();
            filter.Add("GreaterThanOrEquals", start);
            filter.Add("LessThan", end);
            IGridColumn column = _gridComponent.Grid.Columns.FirstOrDefault(c => c.FieldName == "CreatedOn");
            await _gridComponent.AddFilter(column, filter);

        }

        // Get the filtered query from the GridComponent
        var filteredQuery = _grid.Query;

        total = 0;
        hits = 0;
        reported = 0;

        // Create a new GridODataClient with the filtered query and other settings
        var client = new GridODataClient<CampaignLog>(
            HttpClient,
            "Odata/Campaignlog?t=" + authState.TenantIdentifier,
            filteredQuery,
            false,
            "ordersGrid",
            columns
        )
        .ChangePageSize(false) // Disable page size for counting IsHit records
        .Filterable()
        .ClearFiltersButton(true)
        .SetStriped(true)
        .WithMultipleFilters()
        .WithGridItemsCount()
        .Searchable(true, false, false);

        // Retrieve the data for the filtered query
        await client.UpdateGrid();

        // Get all the records from the filtered query
        var filteredRecords = client.Grid.Items;

        hits = filteredRecords.Count(record => record.IsHit);
        reported = filteredRecords.Count(record => record.IsReported);
        total = filteredRecords.Count();
        if (total > 0)
        {
            pronePercent = Math.Round((decimal)hits / total * 100, 2);
        }
        CampaignLogs = filteredRecords.ToList() ?? Enumerable.Empty<CampaignLog>().ToList();

        var data = CampaignLogs.GroupBy(o => o.CampaignId, v => v, (k, v) => new
        {
            CampaignId = k,
            Logs = v,
        });

        BarChart1Labels = data.Select(o => o.Logs.First()?.Camp.Name ?? string.Empty).Distinct().ToArray();

        BarChart1Data.Clear();

        BarChart1Data.Add(new ChartJsDataset
            {
                Label = "Total",
                Data = data.Select(o => o.Logs.Count().ToString()).ToArray(),
                BackgroundColor = ColorHelper.GetBackgroundColors(Color.MediumBlue, data.Select(o => o.CampaignId).Count()),
            });

        BarChart1Data.Add(new ChartJsDataset
            {
                Label = "Hits",
                Data = data.Select(o => o.Logs.Count(o => o.IsHit).ToString()).ToArray(),
                BackgroundColor = ColorHelper.GetBackgroundColors(Color.LightPink, data.Select(o => o.CampaignId).Count()),
            });

        BarChart1Data.Add(new ChartJsDataset
            {
                Label = "Reported",
                Data = data.Select(o => o.Logs.Count(o => o.IsReported).ToString().ToString()).ToArray(),
                BackgroundColor = ColorHelper.GetBackgroundColors(Color.LightGreen, data.Select(o => o.CampaignId).Count()),
            });
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (depart != null || categ != null || TempId > 0) { ExtractIds(); }
        string url = $"Odata/Campaignlog?t={authState.TenantIdentifier}";
        var query = new QueryDictionary<StringValues>();
        filter = true;

        if (Id > 0)
        {
            filter = false;
            if (Label == "Click Count")
            {
                var values = new string[] { $"CampaignId__1__{Id}", $"IsHit__1__true" };
                query.Add("grid-filter", new StringValues(values));
            }

            else if (Label == "Reported")
            {
                var values = new string[] { $"CampaignId__1__{Id}", $"IsReported__1__true" };
                query.Add("grid-filter", new StringValues(values));
            }
            else
            {
                var values = new string[] { $"CampaignId__1__{Id}" };
                query.Add("grid-filter", new StringValues(values));
            }
        }
        else if (categ != null)
        {
            filter = false;
            var values = new string[] { $"Camp.Category__2__{categ}", "CampaignId__9__2", $"CampaignId__1__{id1}", $"CampaignId__1__{id2}", $"CampaignId__1__{id3}", $"CampaignId__1__{id4}", $"CampaignId__1__{id5}", $"IsHit__1__true" };
            query.Add("grid-filter", new StringValues(values));
        }
        else if (depart != null)
        {
            filter = false;
            var values = new string[] { $"Recipient.Recipient.Department__2__{depart}", "CampaignId__9__2", $"CampaignId__1__{id1}", $"CampaignId__1__{id2}", $"CampaignId__1__{id3}", $"CampaignId__1__{id4}", $"CampaignId__1__{id5}", $"IsHit__1__true" };
            query.Add("grid-filter", new StringValues(values));
        }
        else if (TempId > 0)
        {
            filter = false;
            var values = new string[] { $"Camp.Detail.CampaignTemplateId__1__{TempId}", "CampaignId__9__2", $"CampaignId__1__{id1}", $"CampaignId__1__{id2}", $"CampaignId__1__{id3}", $"CampaignId__1__{id4}", $"CampaignId__1__{id5}", $"IsHit__1__true" };
            query.Add("grid-filter", new StringValues(values));
        }
        else
        {
            var year = Int32.Parse(Year.ToString());
            var yearStartDate = new DateTime(year, 1, 1);
            var start = yearStartDate.Year + "-" + yearStartDate.Month + "-" + yearStartDate.Day;
            var yearEndDate = new DateTime(year, 12, 31).AddHours(24).AddSeconds(-1);
            var end = yearEndDate.Year + "-" + yearEndDate.Month + "-" + yearEndDate.Day;
            var values = new string[] { $"CreatedOn__7__{start}", "CampaignId__9__2", $"CreatedOn__6__{end}" };
            query.Add("grid-filter", new StringValues(values));
        }

        try
        {
            var client = new GridODataClient<CampaignLog>(HttpClient, url, query, false, "ordersGrid", columns, 10)
                .ChangePageSize(true)
                .ClearFiltersButton(true)
                .SetStriped(true)
                .WithMultipleFilters()
                .WithGridItemsCount()
                .SetKeyboard(true)
                .SetExcelExport(true, true, "Reports")
                .EmptyText("No Data Available!!")
                .Searchable(true, false, false);


            _grid = client.Grid;
            _task = client.UpdateGrid();
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
        }

        await _task.ContinueWith(async (st) =>
        {
            await OnFilterChanged();
            await Task.CompletedTask;
        });
        Years = await client.GetCampaignLogYears();
    }

    async void ChangeYear(ChangeEventArgs e)
    {
        Year = Convert.ToInt32(e.Value);
        var yearStartDate = new DateTime(Year, 1, 1);
        var start = yearStartDate.Year + "-" + yearStartDate.Month.ToString("00") + "-" + yearStartDate.Day.ToString("00");
        var yearEndDate = new DateTime(Year, 12, 31).AddHours(24).AddSeconds(-1);
        var end = yearEndDate.Year + "-" + yearEndDate.Month + "-" + yearEndDate.Day;


        var filter = new FilterCollection();
        filter.Add("GreaterThanOrEquals", start);
        filter.Add("LessThan", end);
        IGridColumn column = _gridComponent.Grid.Columns.FirstOrDefault(c => c.FieldName == "CreatedOn");


        _grid.RemoveAllFilters();
        _gridComponent.RemoveAllFilters();
        await _gridComponent.AddFilter(column, filter);

    }

    int id1, id2, id3, id4, id5;
    public void ExtractIds()
    {
        id1 = int.Parse(data.Split("a")[0]);
        id2 = int.Parse(data.Split("a")[1]);
        id3 = int.Parse(data.Split("a")[2]);
        id4 = int.Parse(data.Split("a")[3]);
        id5 = int.Parse(data.Split("a")[4]);
    }


}
