@page "/layout"
@page "/layout/{Id}"
@using Newtonsoft.Json.Linq
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models
@using PhishingPortal.UI.Blazor.Shared.ChartJs
@using PhishingPortal.Dto;
@using System.Drawing
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@inject TenantClient client
@inject ILogger<TenantDashboard> logger
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<div class="pcoded-content">
    <h5><span style="color:orange;">Report Details</span></h5>
    <div class="row">
         <div class="col-xl-6 col-md-6">
                    <div class="card">
                        <div class="card-header">
                           @* <h5>Charts</h5>*@
                        </div>
                        <div class="card-body">
                            <div style="width: 100%;" >

                        
                                 <Chart Id="bar" Type="@ChartType.bar" Datasets="@BarChartData" 
                                        Labels="@BarChartLabels" IsStacked="false" >
                                 </Chart>
                            </div>
                        </div>
                    </div>
         </div>

         <div class="col-xl-6 col-md-6">
                    <div class="card">
                        <div class="card-header">
                           
                        </div>
                        <div class="card-body" >
                           <div style="width: 100%;">
                                <div class="container">
                                    <div class="row">
                                        <div class="col-md-6 ">
                                            <div class="card bg-c-blue order-card">
                                                <div class="card-body">
                                                        <div class="row align-items-center m-b-0">
                                                            <div class="col" style="padding: 0">
                                                                <h6 class="m-b-5 text-white">Total </h6>
                                                            </div>
                                                            <div class="col-auto">
                                                                 <h3 style="color:black">20</h3>  
                                                                @*<ConsolidatedPhishingStat Type="PhishingStatsType.Total" Data="stats"></ConsolidatedPhishingStat>*@
                                                            </div>
                                                        </div>
                                                </div>
                                            </div>
                                        </div>  
                                        <div class="col-md-6">
                                            <div class="card bg-c-red order-card">
                                                <div class="card-body">
                                                        <div class="row align-items-center m-b-0">
                                                            <div class="col" style="padding: 0">
                                                                <h6 class="m-b-5 text-white">Hits </h6>
                                                            </div>
                                                            <div class="col-auto">
                                                                 <h3 style="color:black">5</h3>  
                                                                  @*<ConsolidatedPhishingStat Type="PhishingStatsType.Total" Data="stats"></ConsolidatedPhishingStat>*@
                                                            </div>
                                                        </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                     <div class="row">
                                        <div class="col-md-6 ">
                                            <div class="card bg-c-green order-card">
                                                <div class="card-body">
                                                        <div class="row align-items-center m-b-0">
                                                            <div class="col" style="padding: 0">
                                                                <h6 class="m-b-5 text-white">Reported </h6>
                                                            </div>
                                                            <div class="col-auto">
                                                                 <h3 style="color:black">10</h3> 
                                                                @*<ConsolidatedPhishingStat Type="PhishingStatsType.Total" Data="stats"></ConsolidatedPhishingStat>*@
                                                            </div>
                                                        </div>
                                                </div>
                                            </div>
                                        </div>  
                                        <div class="col-md-6">
                                            <div class="card bg-c-yellow order-card">
                                                <div class="card-body">
                                                        <div class="row align-items-center m-b-0">
                                                            <div class="col" style="padding: 0">
                                                                <h6 class="m-b-5 text-white">Prone% </h6>
                                                            </div>
                                                            <div class="col-auto">
                                                                 <h3 style="color:black">25.00</h3> 
                                                                @*<ConsolidatedPhishingStat Type="PhishingStatsType.Total" Data="stats"></ConsolidatedPhishingStat>*@
                                                            </div>
                                                        </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                           </div>
                        </div>
                    </div>
         </div>
         <div class="col-xl-12 col-md-12">
                    <div class="card">
                        <div class="card-header">
                            @*<h5>Data Table</h5>*@
                            @if (_task.IsCompleted)
                            {
                                <GridComponent T="CampaignLog" Grid="@_grid" ></GridComponent>
                            }
                            else
                            {
                                <p><em>Loading...</em></p>
                            }
                        </div>
                        <div class="card-body">
                           <div style="width: 100%;">

                           </div>
                        </div>
                    </div>
         </div>
    </div>
</div>

@code {

    [Parameter]
    public int Id{ get; set; }

    public List<ChartJsDataset> BarChartData { get; set; } = new List<ChartJsDataset>();
    public string[] BarChartLabels { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }

    protected override async Task OnInitializedAsync()
    { 
        StartDate = new DateTime(DateTime.Now.Year, 1, 1);
        EndDate = new DateTime(DateTime.Now.Year, 12, 31).AddHours(24).AddSeconds(-1);
        // campaigns = await client.GetAllCampaignsAsync();
        //var a = campaigns.Where(o => o.Name == "test");


        var data2 = await client.GetCategoryWisePhishingTestData(StartDate, EndDate);


        BarChartLabels = data2.Entries.Select(o => o.Campaign.Name).ToArray();
        BarChartData.Add(new ChartJsDataset
             {
                Label = "Email Count",
                Data = data2.Entries.Select(o => o.Count.ToString()).ToArray(),
                BackgroundColor = GetBackgroundColors(Color.Green, data2.Entries.Count()),
             });
        BarChartData.Add(new ChartJsDataset
           {
               Label = "Click Count",
               Data = data2.Entries.Select(o => o.Hits.ToString()).ToArray(),
               BackgroundColor = GetBackgroundColors(Color.Blue, data2.Entries.Count()),
           });


    }

    public string[] GetBackgroundColors(Color color, int arraySize)
    {
        var colors = new List<string>();
        for (var i = 0; i < arraySize; i++)
            colors.Add(color.Name.ToString().ToLower());
        return colors.ToArray();
    }

    IEnumerable<Campaign> campaigns = null;
    private CGrid<CampaignLog> _grid;
    private Task _task;
    Action<IGridColumnCollection<CampaignLog>> columns = c =>
    {
        c.Add(o => o.Id).Titled("ID").Css("gridStyle");
        c.Add(o => o.CampaignId);
        c.Add(o => o.CampignType);
        c.Add(o => o.RecipientId);
        c.Add(o => o.IsHit);
        c.Add(o => o.IsReported);

    };

    protected override async Task OnParametersSetAsync()
    {
        //string url = NavigationManager.GetBaseUri() + "odata/orders";
        string url = "https://localhost:7018/"+ "odata/orders";
        var query = new QueryDictionary<StringValues>();
        //var html = "<style="color:red">";
        var client = new GridODataClient<CampaignLog>(HttpClient, url, query, false, "ordersGrid", columns, 10)
            .Sortable()
            .Filterable()
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .Searchable(true, false, false)
            .SetExcelExport(true, "Report.xlsx")
            .AddButtonComponent<CampaignLog>("test", "PDF", html);
        _grid = client.Grid;

        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }


}
