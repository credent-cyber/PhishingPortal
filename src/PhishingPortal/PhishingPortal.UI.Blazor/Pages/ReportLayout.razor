@page "/layout"
@page "/layout/{id:int}"
@using Newtonsoft.Json.Linq
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models
@using PhishingPortal.UI.Blazor.Shared.ChartJs
@using PhishingPortal.Dto;
@using System.Drawing
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@inject TenantClient client
@inject ILogger<TenantDashboard> logger
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthState authState;


<div class="pcoded-content">
    <h5><span style="color:orange;">Report Details</span></h5>
    <div class="row">

         <div class="col-xl-12 col-md-12">
                    <div class="card">
                        <div class="card-header">
                            @*<h5>Data Table</h5>*@             
                        </div>
                        <div class="card-body">
                           <div style="width: 100%;">
                                @if (_task.IsCompleted)
                                {
                                    <GridComponent T="CampaignLog" Grid="@_grid" ></GridComponent>
                                }
                                else
                                {
                                    <p><em>Loading...</em></p>
                                }
                           </div>
                        </div>
                    </div>
         </div>
    </div>
</div>

@code {

    [Parameter]
    public int Id{ get; set; }

    public string[] GetBackgroundColors(Color color, int arraySize)
    {
        var colors = new List<string>();
        for (var i = 0; i < arraySize; i++)
            colors.Add(color.Name.ToString().ToLower());
        return colors.ToArray();
    }

    private CGrid<CampaignLog> _grid;
    private Task _task;

    Action<IGridColumnCollection<CampaignLog>> columns = c =>
    {
        c.Add(o => o.Id).Titled("LogID").SetWidth("30px").Css("table-bordered");
        c.Add(o => o.Camp.Id).Titled("CampID").SetWidth("30px").Css("table-bordered");
        c.Add(o => o.Camp.Name).Css("table-bordered").Titled("Campaign Name");;
        c.Add(o => o.CampignType).Css("table-bordered").SetWidth("60px");
        c.Add(o => o.Camp.Category).Css("table-bordered").SetWidth("60px").Titled("Category");
        c.Add(o => o.Recipient.Email).Css("table-bordered").Titled("Recipient Email");
        c.Add(o => o.IsHit).Css("table-bordered");
        c.Add(o => o.IsReported).Css("table-bordered");
        c.Add(o => o.CreatedOn).Css("table-bordered");
        
        
    // c.Add(o => o.Recipient.Department).Css("table-bordered");


    };

    protected override async Task OnParametersSetAsync()
    {
        string url =  $"odata/campaignlog?t={authState.TenantIdentifier}";
        var query = new QueryDictionary<StringValues>();
        query.Add("grid-filter", $"Camp.Id__1__{Id}");

        var client = new GridODataClient<CampaignLog>(HttpClient, url, query, false, "ordersGrid", columns, 10)
            .Sortable()
            .ChangePageSize(true)
            .Filterable()
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .Searchable(true, false, false)
            .SetExcelExport(true, "Report.xlsx")
            .SetRowCssClasses(x => (x.Id)%2 == 1 ? "gridEcolor" : "gridOcolor")
            .AddButtonComponent<CampaignLog>("test", "Print as PDF", (MarkupString)"<a href='/'><span class='oi oi-print' aria-hidden='false'></span></a>");
        _grid = client.Grid;

        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }


}
