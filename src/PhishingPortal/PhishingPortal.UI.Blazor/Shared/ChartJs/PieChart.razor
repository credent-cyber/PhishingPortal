@using PhishingPortal.Dto
@using PhishingPortal.Dto.Dashboard
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models
@inject IJSRuntime JSRuntime
@inject TenantClient client
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<canvas id="@Id"></canvas>


@code {


    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public ChartType Type { get; set; }

    [Parameter]
    public string[] Data { get; set; }

    [Parameter]
    public string[] BackgroundColor { get; set; }

    [Parameter]
    public string[] Labels { get; set; }

    [Parameter]
    public bool Responsive { get; set; } = true;

    [Parameter]
    public bool IsStacked { get; set; }

    [Parameter]
    public List<ChartJsDataset> Datasets { get; set; }

    [Parameter]
    public EventCallback<int> OnChartClick { get; set; }

    [Parameter]
    public bool IsClickable { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Here we create an anonymous type with all the options
        // that need to be sent to Chart.js

        if (Data == null || Data.Count() == 0)
            return;

        var config = new
        {

            Type = Type.ToString(),
            Options = new
            {
                Responsive = Responsive,
                //Scales = new
                //{
                //    XAxes = new[]
                //        {
                //        new
                //        {
                //            Stacked = true
                //        }
                //    }
                //    ,
                //    YAxes = new[]
                //                        {
                //        new { Ticks = new {
                //            BeginAtZero=true
                //        }, Stacked = true }
                //    }
                //}
            },

            Data = new
            {
                Datasets = new[]
                                    {
                    new { Data = Data, BackgroundColor = BackgroundColor}

    },
                Labels = Labels
            }
        };
        var ObjRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("setup", Id, config, ObjRef);
    }


    [JSInvokable]
    public async Task ChartClick(string label, string id)
    {

        if (!IsClickable)
            return;

        if (id.Contains("donut")) { NavManager.NavigateTo($"/report/department/{label}"); }
        else if (id.Contains("pie")) { NavManager.NavigateTo($"/report/category/{label}"); }
        else if (id.Contains("Polar")) 
        {
            var TemplateId = label.Split(".")[0];
            NavManager.NavigateTo($"/report/template/{TemplateId}");
        }

    }


}
