@using PhishingPortal.Dto
@using PhishingPortal.Dto.Dashboard
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models
@inject IJSRuntime JSRuntime
@inject TenantClient client
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<canvas id="@Id"></canvas>


@code {


    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public ChartType Type { get; set; }

    [Parameter]
    public string[] Data { get; set; }

    [Parameter]
    public string[] BackgroundColor { get; set; }

    [Parameter]
    public string[] Labels { get; set; }

    [Parameter]
    public string[] Ids { get; set; }

    [Parameter]
    public bool Responsive { get; set; } = true;

    [Parameter]
    public bool IsStacked { get; set; }

    [Parameter]
    public List<ChartJsDataset> Datasets { get; set; }

    [Parameter]
    public EventCallback<int> OnChartClick { get; set; }

    [Parameter]
    public bool IsClickable { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Here we create an anonymous type with all the options
        // that need to be sent to Chart.js

        if (Data == null || Data.Count() == 0)
            return;

        var config = new
        {

            Type = Type.ToString(),
            Options = new
            {
                Responsive = Responsive
            },

            Data = new
            {
                Datasets = new[]
                                    {
                    new { Data = Data, BackgroundColor = BackgroundColor}

    },
                Labels = Labels,
                Ids = Ids,
            }
        };
        var ObjRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("setup", Id, config, ObjRef);
    }


    [JSInvokable]
    public async Task ChartClick(string label, string id)
    {

        if (!IsClickable)
            return;

        int count = 0, id1 = 0, id2 = 0, id3 = 0, id4 = 0, id5 = 0;
        var StartDate = new DateTime(DateTime.Now.Year, 1, 1);
        var EndDate = new DateTime(DateTime.Now.Year, 12, 31).AddHours(24).AddSeconds(-1);
        var data = await client.GetCategoryWisePhishingTestData(StartDate, EndDate);
        List<PhisingPronePercentEntry> Ids = new();
       
        if (id.Contains("Sms"))
        {
             Ids = data.SmsEntries;
        }
        else if (id.Contains("Whatsapp"))
        {
             Ids = data.WhatsappEntries;           
        }
        else
        {
            Ids = data.Entries;
        }

        foreach (var iid in Ids)
        {
            count += 1;
            if (count == 1)
                id1 = iid.Campaign.Id;
            else if (count == 2)
                id2 = iid.Campaign.Id;
            else if (count == 3)
                id3 = iid.Campaign.Id;
            else if (count == 4)
                id4 = iid.Campaign.Id;
            else if (count == 5)
                id5 = iid.Campaign.Id;
        }
        var ids = id1 + "a" + id2 + "a" + id3 + "a" + id4 + "a" + id5;
        if (id.Contains("donut", StringComparison.InvariantCultureIgnoreCase)) { NavManager.NavigateTo($"/report/{ids}/department/{label}"); }
        else if (id.Contains("pie",StringComparison.InvariantCultureIgnoreCase)) { NavManager.NavigateTo($"/report/{ids}/category/{label}"); }
        else if (id.Contains("Polar", StringComparison.InvariantCultureIgnoreCase))
        {
            var TemplateId = label;
            NavManager.NavigateTo($"/report/{ids}/template/{TemplateId}");
        }

    }


}
