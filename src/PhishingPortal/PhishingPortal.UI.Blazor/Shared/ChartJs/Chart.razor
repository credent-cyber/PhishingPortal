@using PhishingPortal.Dto
@using PhishingPortal.Dto.Dashboard
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models
@inject IJSRuntime JSRuntime
@inject TenantClient client
@inject NavigationManager NavManager
<canvas id="@Id"></canvas>


@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public ChartType Type { get; set; }

    [Parameter]
    public string[] Data { get; set; }

    [Parameter]
    public string[] BackgroundColor { get; set; }

    [Parameter]
    public string[] Labels { get; set; }

    [Parameter]
    public bool Responsive { get; set; } = true;

    [Parameter]
    public bool IsStacked { get; set; }

    [Parameter]
    public List<ChartJsDataset> Datasets { get; set; }

    [Parameter] 
    public EventCallback<int> OnChartClick { get; set; }

    [Parameter]
    public bool IsClickable { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Here we create an anonymous type with all the options
        // that need to be sent to Chart.js

        if (Datasets == null || Datasets.Count() == 0)
            return;

        if (!IsStacked)
        {
            var config = new
            {
                Type = Type.ToString().ToLower(),
                Options = new
                {
                    Responsive = Responsive,
                    Scales = new
                    {

                        YAxes = new[]
                        {
                                new 
                                { 
                                    Ticks = new {  BeginAtZero = true}, 
                                    Stacked = true 
                                }
    }
                    },


                },

                Data = new
                {
                    Labels = Labels,

                    Datasets = Datasets.Select(o => new
                    {
                        Label = o.Label,
                        Data = o.Data,
                        Tension = 0.4,
                        BackgroundColor = o.BackgroundColor,
                        //Fill : true
                        //Urls = o.Data.Select(o=>string.Concat("https://phishsims.com/report/",o))
                    })

                },





            };
            var ObjRef = DotNetObjectReference.Create(this);

            //await JSRuntime.InvokeVoidAsync("setup", Id, config);
            await JSRuntime.InvokeVoidAsync("setup", Id, config, ObjRef);

        }

    }

    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }

    [JSInvokable]
    public async Task ChartClick(string label, string id)
    {

        if (!IsClickable)
            return;

        StartDate = new DateTime(DateTime.Now.Year, 1, 1);
        EndDate = new DateTime(DateTime.Now.Year, 12, 31).AddHours(24).AddSeconds(-1);
        var data2 = await client.GetCategoryWisePhishingTestData(StartDate, EndDate);
        var Camp = data2.Entries.Where(o => o.Campaign.Name == label).ToList();
        var CampId = Camp.Select(o => o.Campaign).First().Id;
        NavManager.NavigateTo($"/report/{CampId}");

    }
    [JSInvokable]
    public static async Task ChartHover()
    {
       //Console.WriteLine("MouseHovered"); 
    }

}
