@using PhishingPortal.Dto
@using PhishingPortal.Dto.Dashboard
@using PhishingPortal.UI.Blazor.Client
@using PhishingPortal.UI.Blazor.Models
@inject IJSRuntime JSRuntime
@inject TenantClient client
@inject NavigationManager NavManager
<canvas id="@Id"></canvas>


@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public ChartType Type { get; set; }

    [Parameter]
    public string[] Data { get; set; }

    [Parameter]
    public string[] BackgroundColor { get; set; }

    [Parameter]
    public string[] Labels { get; set; }

    [Parameter]
    public int[] Ids { get; set; }

    [Parameter]
    public bool Responsive { get; set; } = true;

    [Parameter]
    public bool AspectRatio { get; set; } = true;

    [Parameter]
    public bool IsStacked { get; set; }

    [Parameter]
    public List<ChartJsDataset> Datasets { get; set; }

    [Parameter]
    public EventCallback<int> OnChartClick { get; set; }

    [Parameter]
    public bool IsClickable { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Here we create an anonymous type with all the options
        // that need to be sent to Chart.js

        if (Datasets == null || Datasets.Count() == 0)
            return;

        if (!IsStacked)
        {
            var config = new
            {
                Type = Type.ToString().ToLower(),
                Options = new
                {
                    Responsive = Responsive,
                    maintainAspectRatio = AspectRatio,
                    Scales = new
                    {

                        YAxes = new[]
                        {
                                new
                                {
                                    Ticks = new {  BeginAtZero = true},
                                    Stacked = true
                                }
    }
                    },


                },

                Data = new
                {
                    Labels = Labels,
                    Ids = Ids,
                    Datasets = Datasets.Select(o => new
                    {
                        Label = o.Label,
                        Data = o.Data,
                        Tension = 0.4,
                        BackgroundColor = o.BackgroundColor,

                        //Fill : true
                        //Urls = o.Data.Select(o=>string.Concat("https://phishsims.com/report/",o))
                    })

                },





            };
            var ObjRef = DotNetObjectReference.Create(this);

            await JSRuntime.InvokeVoidAsync("setup", Id, config, ObjRef);

        }

    }

    [JSInvokable]
    public async Task ChartClick(int Id, string label, string ChartId)
    {
        if (!IsClickable)
            return;
        if (ChartId.Contains("Training"))
        {
            NavManager.NavigateTo($"/tenant-training-report/{Id}/{label}");
        }
        else if (ChartId.Contains("User"))
        {
            NavManager.NavigateTo($"/training/my-trainings/{Id}/{label}");
        }

        else
        {
            NavManager.NavigateTo($"/report/{Id}/{label}");
        }
    }
    [JSInvokable]
    public static async Task ChartHover()
    {
        //Console.WriteLine("MouseHovered");
    }

}
