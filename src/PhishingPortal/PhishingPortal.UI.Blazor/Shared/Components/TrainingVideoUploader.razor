@using Microsoft.Extensions.Logging;
@using PhishingPortal.Dto;
@using PhishingPortal.UI.Blazor.Client;
@using PhishingPortal.UI.Blazor.Models;
@using System.ComponentModel.DataAnnotations;
@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json;
@using System.Text;
@inject HttpClient _httpClient
@using System.IO
@inject TenantClient client;
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (model == null)
{
    <div class="col-sm-12" style="margin-top:40vh">
        <div class="card-header">
            <div class="loading-bar"></div>
        </div>
    </div>
}
else
{
    <EditForm Model="@model" OnValidSubmit="@Add">
        <DataAnnotationsValidator />
        <div class="form-row">
            <label class="col-form-label bold-font required-field">Video Name</label>
            <div class="form-group col-md-3">
                <InputText id="Name" @bind-Value="model.VideoTitle" class="form-control" />
                <ValidationMessage For="() => model.VideoTitle" />
            </div>
            <label class="col-form-label bold-font required-field">Select Video</label>
            <div class="form-group col-md-4">
                <InputFile OnChange="@OnInputFileChange" disabled="@_uploading" class="form-control" accept="video/mp4,video/x-m4v,video/*" />
                @if (file == null && IsError)
                {
                    <span style="color:red">Please select video file!</span>
                }
            </div>
            <div class="form-group col-md-2" style="margin-top:0px">
                <button type="submit" class="btn btn-primary"><i class="fa fa-cloud-upload" aria-hidden="true"></i> Upload</button>
            </div>

        </div>
    </EditForm>

    <Dailog Title="@message" Show="@show" OnCloseDialog="ResetForm">
        @if (show)
        {
            <progress id="progressBar" value="@percent" max="100" style="width:100%;"></progress>
            <div>@echo</div><br/>
            <div style="font-size:8px">@uploadedBytesInfo</div>
        }
    </Dailog>
}


@code {
    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    [Parameter]
    public EventCallback<bool> OnUploadCompletion { get; set; }
    public bool isDisabled = true;
    public bool IsError = false;
    string message = string.Empty;
    private bool show = false;
    IBrowserFile file;

    private Timer _timer;
    private int _delay = 1500;
    TrainingVideo model = new TrainingVideo();
    bool _uploading;
    string echo = string.Empty;
    string uploadedBytesInfo = string.Empty;
    long percent = 0;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var a = file;
        file = e.File;
    }

    private async Task Add()
    {
        IsError = false;
        if (file == null)
        {
            IsError = true;
            return;
        }
        show = true;
        message = "Uploading...";

        const long CHUNKSIZE = 1024 * 400; // subjective
        long uploadedBytes = 0;
        long totalBytes = file.Size;
        percent = 0;
        int fragment = 0;
        long chunkSize;

        using (var inStream = file.OpenReadStream(long.MaxValue))
        {
            _uploading = true;
            while (_uploading)
            {
                chunkSize = CHUNKSIZE;
                if (uploadedBytes + CHUNKSIZE > totalBytes)
                {// remainder
                    chunkSize = totalBytes - uploadedBytes;
                }
                var chunk = new byte[chunkSize];
                await inStream.ReadAsync(chunk, 0, chunk.Length);
                // upload this fragment
                using var formFile = new MultipartFormDataContent();
                var fileContent = new StreamContent(new MemoryStream(chunk));
                formFile.Add(fileContent, "file", file.Name);
                var response = await _httpClient.PostAsync($"api/FileUpload/AppendFile/{fragment++}", formFile);

                // check if the response is successful
                if (!response.IsSuccessStatusCode)
                {
                    message = "Failed to upload file.";
                    return;
                }

                // extract the filename from the response
                var responseBody = await response.Content.ReadAsStringAsync();
                var jsonOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var result = JsonSerializer.Deserialize<UploadResult>(responseBody, jsonOptions);

                // Update our progress data and UI
                uploadedBytes += chunkSize;
                percent = uploadedBytes * 100 / totalBytes;
                echo = $"{percent}% | Fragment: {fragment}";
                uploadedBytesInfo = $"Uploaded {uploadedBytes} of {totalBytes}";
                if (percent >= 100)
                {
                    _uploading = false;
                    message = "";
                    message = "Successfully Uploaded!";
                    // store the filelocation in the model
                    model.FilePath = result.FileLocation;
                    var upsertResult = await client.UpsertTrainingVideo(model);
                    model = new TrainingVideo();
                }
                await InvokeAsync(StateHasChanged);
            }
        }
    }


    private void ResetForm()
    {
        show = false;
        if (message.Contains("Successfully Uploaded"))
        {
            model = new TrainingVideo();
        }
        RefreshTrainingVideos.InvokeAsync();
    }

    [Parameter]
    public EventCallback RefreshTrainingVideos { get; set; }
}